private final static int default_ballsQuantity = 1;
        private final static int default_minBallAlive = 1;
        private final static float default_ballsRadius_BR = 0.012f;
        private final static float default_ballsX_BR = 1f;
        private final static float default_ballsY_BR = 1f;
        private final static float default_ballsVX_BR = 0.0025f;
        private final static float default_ballsVY_BR = 0.0044117647f;
        private final static int default_ballTextureMap = Ball.COLOR_BALL_BLACK;
        private final static float default_ballsAngleToRotate = 2f;
        private final static float default_ballsMaxAngle = 52f;
        private final static float default_ballsMinAngle = 38f;
        private final static float default_ballsVelocityVariation = 0.06f;
        private final static float default_ballsVelocityMax_BI = 1.35f;
        private final static float default_ballsVelocityMin_BI = 0.8f;
        private final static int default_barsQuantity = 1;
        private final static float default_barsWidth_BR = 0.22f;
        private final static float default_barsHeight_BR = 0.0175f;
        private final static float default_barsY_BR = 0.024f;
        private final static float default_barsVX_BR = 0.004f;





package com.marcelslum.ultnogame;


import android.util.Log;

import java.util.ArrayList;

/**
 * Created by marcel on 07/08/2016.
 */
public class Level {

    public static Game game;
    public int tutorialAttached;
    public static final int WIND_TYPE_NO = 0;
    public static final int WIND_TYPE_RIGHT = 1;
    public static final int WIND_TYPE_LEFT = 2;
    public int ballsQuantity;
    public int minBallsAlive;
    public float[] ballsRadius_BR;
    public float[] ballsX_BR;
    public float[] ballsY_BR;
    public float[] ballsVX_BR;
    public float[] ballsVY_BR;
    public int [] ballsTextureMap;
    public boolean[] ballsInvencible;
    public float[] ballsAngleToRotate;
    public float[] ballsMaxAngle;
    public float[] ballsMinAngle;
    public float[] ballsVelocityVariation;
    public float[] ballsVelocityMax_BI;
    public float[] ballsVelocityMin_BI;
    public ArrayList<int[]> ballsTargetsAppend;
    public boolean[] ballsFree;
    public int barsQuantity;
    public float[] barsWidth_BR;
    public float[] barsHeight_BR;
    public float[] barsX_BR;
    public float[] barsY_BR;
    public float[] barsVX_BR;
    public float[] barsVY_BR;
    public ScaleVariationDataBuilder[] barsScaleVariationData;
    public float targetWidth_BR;
    public float targetHeight_BR;
    public float targetsDistance_BR;
    public float targetsPadding_BR;
    public int [][] targetsMap;
    public int [] targetsStates;
    public int obstaclesQuantity;
    public float[] obstaclesWidth_BR;
    public float[] obstaclesHeight_BR;
    public float[] obstaclesX_BR;
    public float[] obstaclesY_BR;
    public ScaleVariationDataBuilder[] obstaclesScaleVariationData;
    public PositionVariationDataBuilder[] obstaclesPositionVariationData;
    public int windowsQuantity;
    public float[] windowsY;
    public float[] windowsHeight;
    public int[] windowsQuantityOfLines;
    public float[] windowsDistance;
    public float[] windowsVelocity;
    public boolean isHaveSpecialBall = true;
    public float specialBallPercentage = 0.0f;
    public float windType;


    public static Level levelObject;
    public static LevelGoals levelGoalsObject;

    public static final int maxNumberOfLevels = 100;

    private Level(){
        this.ballsQuantity = LevelBuilder.ballsQuantity;
        this.minBallsAlive = LevelBuilder.minBallsAlive;
        this.ballsRadius_BR = LevelBuilder.ballsRadius_BR;
        this.ballsX_BR = LevelBuilder.ballsX_BR;
        this.ballsY_BR = LevelBuilder.ballsY_BR;
        this.ballsVX_BR = LevelBuilder.ballsVX_BR;
        this.ballsVY_BR = LevelBuilder.ballsVY_BR;
        this.ballsTextureMap = LevelBuilder.ballsTextureMap;
        this.ballsInvencible = LevelBuilder.ballsInvencible;
        this.ballsAngleToRotate = LevelBuilder.ballsAngleToRotate;
        this.ballsMaxAngle = LevelBuilder.ballsMaxAngle;
        this.ballsMinAngle = LevelBuilder.ballsMinAngle;
        this.ballsVelocityVariation = LevelBuilder.ballsVelocityVariation;
        this.ballsVelocityMax_BI = LevelBuilder.ballsVelocityMax_BI;
        this.ballsVelocityMin_BI = LevelBuilder.ballsVelocityMin_BI;
        this.ballsTargetsAppend = LevelBuilder.ballsTargetsAppend;
        this.ballsFree = LevelBuilder.ballsFree;
        this.barsQuantity = LevelBuilder.barsQuantity;
        this.barsWidth_BR = LevelBuilder.barsWidth_BR;
        this.barsHeight_BR = LevelBuilder.barsHeight_BR;
        this.barsX_BR = LevelBuilder.barsX_BR;
        this.barsY_BR = LevelBuilder.barsY_BR;
        this.barsVX_BR = LevelBuilder.barsVX_BR;
        this.barsVY_BR = LevelBuilder.barsVY_BR;
        this.barsScaleVariationData = LevelBuilder.barsScaleVariationData;
        this.targetWidth_BR = LevelBuilder.targetsWidht_BR;
        this.targetHeight_BR = LevelBuilder.targetsHeight_BR;
        this.targetsDistance_BR = LevelBuilder.targetsDistance_BXR;
        this.targetsPadding_BR = LevelBuilder.targetsPadding_BXR;
        this.targetsMap = LevelBuilder.targetsMap;
        this.targetsStates = LevelBuilder.targetsStates;
        this.obstaclesQuantity = LevelBuilder.obstaclesQuantity;
        this.obstaclesWidth_BR = LevelBuilder.obstaclesWidth_BR;
        this.obstaclesHeight_BR = LevelBuilder.obstaclesHeight_BR;
        this.obstaclesX_BR = LevelBuilder.obstaclesX_BR;
        this.obstaclesY_BR = LevelBuilder.obstaclesY_BR;
        this.obstaclesScaleVariationData = LevelBuilder.obstaclesScaleVariationData;
        this.obstaclesPositionVariationData = LevelBuilder.obstaclesPositionVariationData;
        this.windowsQuantity = LevelBuilder.windowsQuantity;
        this.windowsY = LevelBuilder.windowsY;
        this.windowsHeight = LevelBuilder.windowsHeight;
        this.windowsQuantityOfLines = LevelBuilder.windowsQuantityOfLines;
        this.windowsDistance = LevelBuilder.windowsDistance;
        this.windowsVelocity = LevelBuilder.windowsVelocity;
        this.specialBallPercentage = LevelBuilder.specialBallPercentage;
        this.windType = LevelBuilder.windType;
        this.tutorialAttached = LevelBuilder.tutorialAttached;
    }

    public void loadEntities() {
        Game.eraseAllGameEntities();
        Game.quad = new Quadtree(new RectangleM(0,0,Game.gameAreaResolutionX,Game.gameAreaResolutionY),5,5);

        MessagesHandler.messageTime = new Text("messageTime",
                Game.resolutionX*0.99f, Game.gameAreaResolutionY*0.85f, Game.resolutionY*0.055f,"00:00", Game.font, new Color(0.35f, 0.35f, 0.35f, 1f), Text.TEXT_ALIGN_RIGHT);
        MessagesHandler.messageTime.alpha = 0.7f;

        ScoreHandle.scorePanel = new ScorePanel("scorePanel",
                Game.gameAreaResolutionX * 0.5f, Game.gameAreaResolutionY * 1.047f, Game.resolutionY * 0.07f);

        float scorePanelX = ScoreHandle.scorePanel.x + (ScoreHandle.scorePanel.getWidth()*0.014f);
        float scorePanelWidth = ScoreHandle.scorePanel.getWidth() - (ScoreHandle.scorePanel.getWidth()*0.035f);

        Game.ballDataPanel = new BallDataPanel("ballDataPanel",
            scorePanelX,
            Game.gameAreaResolutionY * 1.05f + Game.resolutionY * 0.08f,
            scorePanelWidth,
            Game.resolutionY * 0.0175f);

        Game.ballGoalsPanel = new BallGoalsPanel("ballGoalsPanel", this.game,
                Game.gameAreaResolutionX * 0.5f, Game.gameAreaResolutionY * 1.005f, Game.resolutionY * 0.027f);
        Game.ballGoalsPanel.alpha = 0.9f;

        // escolhe o background de acordo com o número do nível
        int back;
        if (SaveGame.saveGame.currentLevelNumber < 9) {
            back = SaveGame.saveGame.currentLevelNumber;
        } else {
            back = SaveGame.saveGame.currentLevelNumber % 9;
        }

        Game.background = new Background("background", 0, 0, Game.gameAreaResolutionX,Game.resolutionY, back);

        if (windType == Level.WIND_TYPE_NO){
            Game.wind = null;
        } else if (windType == Level.WIND_TYPE_RIGHT){
            Game.wind = new Wind("wind", 0f, 0f, Game.gameAreaResolutionY, true);
        } else if (windType == Level.WIND_TYPE_LEFT){
            Game.wind = new Wind("wind", 0f, 0f, Game.gameAreaResolutionY, false);
        }

        Game.bordaB.y = Game.gameAreaResolutionY-2;
        Game.bordaB.clearAnimations();

        //Log.e("Level loadEnt", "1");
        float y = Game.resolutionY * 0.86f;
        float buttonSize = Game.resolutionY * 0.13f;

        // BOTÃO 1 ESQUERDA
        float x = Game.resolutionX * 0.03f;
        ButtonHandler.button1Left = new Button("button1Left", x, y, buttonSize, buttonSize, Texture.TEXTURE_BUTTONS_BALLS_STARS, 1.2f, Button.BUTTON_TYPE_BUTTONS_AND_BALLS);
        ButtonHandler.button1Left.setTextureMap(19);
        ButtonHandler.button1Left.textureMapUnpressed = 19;
        ButtonHandler.button1Left.textureMapPressed = 18;
        ButtonHandler.button1Left.alpha = 0.7f;

        // BOTÃO 2 DIREITA
        x = Game.resolutionX * 0.87f;
        ButtonHandler.button2Right = new Button("buttonRight", x, y, buttonSize, buttonSize, Texture.TEXTURE_BUTTONS_BALLS_STARS, 1.2f, Button.BUTTON_TYPE_BUTTONS_AND_BALLS);
        ButtonHandler.button2Right.setTextureMap(20);
        ButtonHandler.button2Right.textureMapUnpressed = 20;
        ButtonHandler.button2Right.textureMapPressed = 17;

        if (this.barsQuantity > 1) {
            // BOTÃO 1 DIREITA
            x = Game.resolutionX * 0.18f;
            ButtonHandler.button1Right = new Button("button1Right",x, y, buttonSize, buttonSize, Texture.TEXTURE_BUTTONS_BALLS_STARS, 1.2f, Button.BUTTON_TYPE_BUTTONS_AND_BALLS);
            ButtonHandler.button1Right.setTextureMap(20);
            ButtonHandler.button1Right.textureMapUnpressed = 20;
            ButtonHandler.button1Right.textureMapPressed = 17;
            ButtonHandler.button1Right.alpha = 0.7f;

            // BOTÃO 2 ESQUERDA
            x = Game.resolutionX * 0.72f;
            ButtonHandler.button2Left = new Button("button2Left", x, y, buttonSize, buttonSize, Texture.TEXTURE_BUTTONS_BALLS_STARS, 1.2f, Button.BUTTON_TYPE_BUTTONS_AND_BALLS);
            ButtonHandler.button2Left.setTextureMap(19);
            ButtonHandler.button2Left.textureMapUnpressed = 19;
            ButtonHandler.button2Left.textureMapPressed = 18;
        }

        InteractionListener gameAreaInteractionListener = new InteractionListener("gameArea111", 0f, 0f,
                Game.gameAreaResolutionX, Game.gameAreaResolutionY * 0.8f, 0, Game.background);

        gameAreaInteractionListener.setPressListener(new InteractionListener.PressListener() {
            @Override
            public void onPress() {
                if (Game.gameState == Game.GAME_STATE_JOGAR){
                    Log.e("level", "listener pause ativado");
                    Game.blockAndWaitTouchRelease();
                    Game.setGameState(Game.GAME_STATE_PAUSE);
                }
            }

            @Override
            public void onUnpress(){
            }
        });
        Game.addInteracionListener(gameAreaInteractionListener);

        for (int i = 0; i < this.barsQuantity; i++){

            float barX = Game.gameAreaResolutionX * barsX_BR[i];
            float barY = Game.gameAreaResolutionY - (Game.gameAreaResolutionY * barsY_BR[i]);

            float barWidth = Game.gameAreaResolutionX * barsWidth_BR[i];
            float barHeight = Game.gameAreaResolutionY * barsHeight_BR[i];

            float barVelocityX = Game.gameAreaResolutionX * barsVX_BR[i]; //* Game.difficultyVelocityBarMultiplicator;
            //float barVelocityY = Game.gameAreaResolutionY * barsVY_BR[i] * Game.difficultyVelocityBarMultiplicator;

            //Game.barsDesiredVelocityX[i] = barVelocityX;
            //Game.barsDesiredVelocityY[i] = barVelocityY;
            //Game.barsInitialPositionX[i] = barX;
            //Game.barsInitialPositionY[i] = barY;

            Bar bar = new Bar("bar", barX, barY, barWidth, barHeight);
            Game.addBar(bar);

            bar.initialX = barX;
            bar.initialY = barY;
            bar.initialDVX = barVelocityX;
            bar.dvx = barVelocityX;
            if (barsScaleVariationData != null) {
                bar.setScaleVariation(barsScaleVariationData[i]);
            }
        }

        float targetWidth = Game.gameAreaResolutionX * levelObject.targetWidth_BR;
        float targetHeight = Game.gameAreaResolutionY * levelObject.targetHeight_BR;
        float targetX;
        float targetY;

        Log.e("level", "targetsMap.length "+targetsMap.length);
        int contador = 0;
        for (int iY = 0; iY < targetsMap.length;iY++){
            for (int iX = 0; iX < targetsMap[iY].length; iX++) {
                if (targetsMap[iY][iX] != 0) {
                    targetX = (Game.gameAreaResolutionX * targetsPadding_BR) +
                            (iX * ((Game.gameAreaResolutionX * targetWidth_BR) +
                                    (Game.gameAreaResolutionX * targetsDistance_BR)));
                    targetY = (Game.gameAreaResolutionX * targetsPadding_BR) +
                            (iY * ((Game.gameAreaResolutionY * targetHeight_BR) +
                                    (Game.gameAreaResolutionX * targetsDistance_BR)));

                    Target t = new TargetBuilder()
                            .name("target")
                            .game(game)
                            .x(targetX)
                            .y(targetY)
                            .width(targetWidth)
                            .height(targetHeight)
                            .weight(Game.TARGET_WEIGHT)
                            .type(targetsMap[iY][iX])
                            .states(targetsStates)
                            .build();

                    Log.e("Game", "target "+contador +": "+t.x + " " + t.y);

                    Game.addTarget(t);
                    contador += 1;
                }
            }
        }

        // adiciona os obstáculos
        for (int i = 0; i < this.obstaclesQuantity; i++){
            float obstacleX = Game.gameAreaResolutionX * obstaclesX_BR[i];
            float obstacleY = Game.gameAreaResolutionY * this.obstaclesY_BR[i];
            float obstacleWidth = Game.gameAreaResolutionX * obstaclesWidth_BR[i];
            float obstacleHeight = Game.gameAreaResolutionY * obstaclesHeight_BR[i];
            Obstacle obstacle = new Obstacle("obstacle", obstacleX, obstacleY, obstacleWidth, obstacleHeight);
            obstacle.addBorder(0.05f, Game.gameAreaResolutionX * 0.003f, Game.gameAreaResolutionX * 0.003f, new Color(0.6f, 0.605f, 0.6f, 1.0f));
            if (obstaclesScaleVariationData != null) {
                //Log.e("level", "setting obstacle scale variation data");
                if (obstaclesScaleVariationData.length > i) {
                    if (obstaclesScaleVariationData[i] != null) {
                        obstacle.setScaleVariation(obstaclesScaleVariationData[i]);
                        //obstacle.scaleVariationData.heightVelocity *= Game.difficultyVelocityObstacleMultiplicator;
                        //obstacle.scaleVariationData.widthVelocity *= Game.difficultyVelocityObstacleMultiplicator;
                    }
                }
                obstacle.stopScaleVariation();
            }
            if (obstaclesPositionVariationData != null) {
                //Log.e("level", "setting obstacle scale variation data");
                if (obstaclesPositionVariationData.length > i) {
                    if (obstaclesPositionVariationData[i] != null) {
                        obstacle.setPositionVariation(obstaclesPositionVariationData[i]);
                        //obstacle.positionVariationData.xVelocity *= Game.difficultyVelocityObstacleMultiplicator;
                        //obstacle.positionVariationData.yVelocity *= Game.difficultyVelocityObstacleMultiplicator;
                    }
                }
                obstacle.stopPositionVariation();
            }

            Game.addObstacle(obstacle);
        }

        for (int i = 0; i < this.windowsQuantity; i++){
            float wY = Game.gameAreaResolutionY * windowsY[i];
            float wHeight = Game.gameAreaResolutionY * windowsHeight[i];
            float wVelocity = Game.gameAreaResolutionX * windowsVelocity[i];

            Game.addWindow(new WindowGame("windows", wY, windowsQuantityOfLines[i], wHeight, windowsDistance[i], wVelocity));
        }

        int quantityOfSpecialTargets = 0;
        for (int i = 0; i < Game.targets.size(); i++){
            if (Game.targets.get(i).special == 1)
                quantityOfSpecialTargets += 1;
        }

        int numberOfBallsInvencible = 0;

        for (int i = 0; i < this.ballsQuantity; i++){

            int ic = i; if (i > this.ballsX_BR.length - 1) {ic = 0;}
            float ballX = Game.gameAreaResolutionX * this.ballsX_BR[ic];

            ic = i; if (i > this.ballsY_BR.length - 1) {ic = 0;}
            float ballY = Game.gameAreaResolutionY * this.ballsY_BR[ic];

            ic = i; if (i > this.ballsRadius_BR.length - 1) {ic = 0;}
            float radius = Game.gameAreaResolutionY * this.ballsRadius_BR[ic];

            ic = i; if (i > this.ballsVX_BR.length - 1) {ic = 0;}
            float ballVelocityX = Game.gameAreaResolutionX * this.ballsVX_BR[ic]; //* Game.difficultyVelocityBallMultiplicator;

            ic = i; if (i > this.ballsVY_BR.length - 1) {ic = 0;}
            float ballVelocityY = Game.gameAreaResolutionY * this.ballsVY_BR[ic]; //* Game.difficultyVelocityBallMultiplicator;

            ic = i; if (i > this.ballsInvencible.length - 1) {ic = 0;}
            if (this.ballsInvencible[ic]){
                numberOfBallsInvencible += 1;
            }

            ic = i; if (i > this.ballsTextureMap.length - 1) {ic = 0;}
            Ball ball = new Ball("ball", ballX, ballY, radius, this.ballsTextureMap[ic]);

            ic = i; if (i > this.ballsAngleToRotate.length - 1) {ic = 0;}
            ball.angleToRotate = this.ballsAngleToRotate[ic];
            ic = i; if (i > this.ballsVelocityVariation.length - 1) {ic = 0;}
            ball.velocityVariation = this.ballsVelocityVariation[ic];

            ic = i; if (i > this.ballsVelocityMax_BI.length - 1) {ic = 0;}
            ball.velocityMax_BI = ballsVelocityMax_BI[ic];
            ic = i; if (i > this.ballsVelocityMin_BI.length - 1) {ic = 0;}
            ball.velocityMin_BI = ballsVelocityMin_BI[ic];

            ic = i; if (i > this.ballsMaxAngle.length - 1) {ic = 0;}
            ball.maxAngle = this.ballsMaxAngle[ic];
            ic = i; if (i > this.ballsMinAngle.length - 1) {ic = 0;}
            ball.minAngle = this.ballsMinAngle[ic];

            ball.initialDVX = ballVelocityX;
            ball.initialDVY = ballVelocityY;

            ball.initialX = ballX;
            ball.initialY = ballY;

            ball.dvx = ballVelocityX;
            ball.dvy = ballVelocityY;

            if (ball.targetsAppend == null){
                ball.targetsAppend = new ArrayList<>();
            } else {
                ball.targetsAppend.clear();
            }

            if (ballsTargetsAppend != null && ballsTargetsAppend.size() > 0) {
                ic = i;
                if (i > ballsTargetsAppend.size() - 1) {
                    ic = 0;
                }
                for (int ta = 0; ta < ballsTargetsAppend.get(ic).length; ta++) {
                    Log.e("Level", "adicionando target " + ballsTargetsAppend.get(ic)[ta] + " à bola " + ic);
                    Target t = game.targets.get(ballsTargetsAppend.get(ic)[ta]);
                    Log.e("Level", t.x + " - " + t.y);
                    ball.targetsAppend.add(t);
                }
            }


            ic = i; if (i > this.ballsFree.length - 1) {ic = 0;}
            ball.isFree = this.ballsFree[ic];

            ic = i; if (i > this.ballsInvencible.length - 1) {ic = 0;}
            if (this.ballsInvencible[ic]){
                ball.setInvencible();
            }

            Game.addBall(ball);

        }
    }

    static public class LevelBuilder {
        private final static int default_ballsQuantity = 1;
        private final static int default_minBallAlive = 1;
        private final static float default_ballsRadius_BR = 0.012f;
        private final static float default_ballsX_BR = 1f;
        private final static float default_ballsY_BR = 1f;
        private final static float default_ballsVX_BR = 0.0025f;
        private final static float default_ballsVY_BR = 0.0044117647f;
        private final static int default_ballTextureMap = Ball.COLOR_BALL_BLACK;
        private final static float default_ballsAngleToRotate = 2f;
        private final static float default_ballsMaxAngle = 52f;
        private final static float default_ballsMinAngle = 38f;
        private final static float default_ballsVelocityVariation = 0.06f;
        private final static float default_ballsVelocityMax_BI = 1.35f;
        private final static float default_ballsVelocityMin_BI = 0.8f;
        private final static int default_barsQuantity = 1;
        private final static float default_barsWidth_BR = 0.22f;
        private final static float default_barsHeight_BR = 0.0175f;
        private final static float default_barsY_BR = 0.024f;
        private final static float default_barsVX_BR = 0.004f;

        private static int ballsQuantity = default_ballsQuantity;
        private static int minBallsAlive = default_minBallAlive;
        private static float[] ballsRadius_BR = new float[]{default_ballsRadius_BR};
        private static float[] ballsX_BR = new float[]{default_ballsX_BR};
        private static float[] ballsY_BR = new float[]{default_ballsY_BR};
        private static float[] ballsVX_BR = new float[]{default_ballsVX_BR};
        private static float[] ballsVY_BR = new float[]{default_ballsVY_BR};
        private static int[] ballsTextureMap = new int []{default_ballTextureMap};
        private static boolean[] ballsInvencible = new boolean[]{false};
        private static float[] ballsAngleToRotate = new float[]{default_ballsAngleToRotate};
        private static float[] ballsMaxAngle = new float[]{default_ballsMaxAngle};
        private static float[] ballsMinAngle = new float[]{default_ballsMinAngle};
        private static float[] ballsVelocityVariation = new float[]{default_ballsVelocityVariation};
        private static float[] ballsVelocityMax_BI = new float[]{default_ballsVelocityMax_BI};
        private static float[] ballsVelocityMin_BI = new float[]{default_ballsVelocityMin_BI};
        private static ArrayList<int[]> ballsTargetsAppend = new ArrayList<int[]>();
        private static boolean[] ballsFree = new boolean[]{true};
        private static int barsQuantity = default_barsQuantity;
        private static float[] barsWidth_BR = new float[]{default_barsWidth_BR};
        private static float[] barsHeight_BR = new float[]{default_barsHeight_BR};
        private static float[] barsX_BR = new float[]{0.3f};
        private static float[] barsY_BR = new float[]{default_barsY_BR};
        private static float[] barsVX_BR = new float[]{default_barsVX_BR};
        private static float[] barsVY_BR = new float[]{0f};
        private static ScaleVariationDataBuilder[] barsScaleVariationData;
        private static float targetsWidht_BR = 0.1f;
        private static float targetsHeight_BR = 0.1f;
        private static float targetsDistance_BXR = 0.01f;
        private static float targetsPadding_BXR = 0.01f;
        private static int [] targetsStates;
        private static int [][] targetsMap;
        private static int obstaclesQuantity = 0;
        private static float[] obstaclesWidth_BR;
        private static float[] obstaclesHeight_BR;
        private static float[] obstaclesX_BR;
        private static float[] obstaclesY_BR;
        private static ScaleVariationDataBuilder[] obstaclesScaleVariationData;
        public static PositionVariationDataBuilder[] obstaclesPositionVariationData;
        private static int windowsQuantity;
        private static float[] windowsY;
        private static float[] windowsHeight;
        private static int[] windowsQuantityOfLines;
        private static float[] windowsDistance;
        private static float[] windowsVelocity;
        private static float specialBallPercentage;
        private static int windType = Level.WIND_TYPE_NO;
        private static ArrayList<LevelGoal> levelGoals;
        public static int tutorialAttached;

        public LevelBuilder setTutorialAttached(int _tutorialAttached) {
            tutorialAttached = _tutorialAttached;
            return this;
        }

        public LevelBuilder setBallsQuantity(int _ballsQuantity) {
            ballsQuantity = _ballsQuantity;
            return this;
        }



        public LevelBuilder setMinBallsAlive(int _minBallsAlive) {
            minBallsAlive = _minBallsAlive;
            return this;
        }

        public LevelBuilder setBallsRadius(float... v) {
            ballsRadius_BR = new float[v.length];
            for (int i = 0; i < v.length; i++){
                ballsRadius_BR[i] = v[i];
            }
            return this;
        }

        public LevelBuilder setBallsX_B1(float... _ballsInitialX_BR) {
            ballsX_BR = new float[_ballsInitialX_BR.length];
            for (int i = 0; i < _ballsInitialX_BR.length; i++){
                ballsX_BR[i] = _ballsInitialX_BR[i] * default_ballsX_BR;
            }
            return this;
        }

        public LevelBuilder setBallsY_B1(float... _ballsY_BR) {
            ballsY_BR = new float[_ballsY_BR.length];
            for (int i = 0; i < _ballsY_BR.length; i++){
                ballsY_BR[i] = _ballsY_BR[i] * default_ballsY_BR;
            }
            return this;
        }


        public LevelBuilder setBallsVX(float... _ballsDesiredVelocityX_BR) {
            ballsVX_BR = new float[_ballsDesiredVelocityX_BR.length];
            for (int i = 0; i < _ballsDesiredVelocityX_BR.length; i++){
                ballsVX_BR[i] = _ballsDesiredVelocityX_BR[i] * default_ballsVX_BR;
            }
            return this;
        }

        public LevelBuilder setBallsVY(float... _ballsDesiredVelocityY_BR) {
            ballsVY_BR = new float[_ballsDesiredVelocityY_BR.length];
            for (int i = 0; i < _ballsDesiredVelocityY_BR.length; i++){
                ballsVY_BR[i] = _ballsDesiredVelocityY_BR[i] * default_ballsVY_BR;
            }
            return this;
        }

        public LevelBuilder setBallsTextureMap(int... _ballsTextureMap) {
            ballsTextureMap = new int[_ballsTextureMap.length];
            System.arraycopy(_ballsTextureMap, 0, ballsTextureMap, 0, _ballsTextureMap.length);
            return this;
        }

        public LevelBuilder setBallsInvencible(boolean... _ballsInvencible) {
            ballsInvencible = new boolean[_ballsInvencible.length];
            System.arraycopy(_ballsInvencible, 0, ballsInvencible, 0, _ballsInvencible.length);
            return this;
        }

        public LevelBuilder setBallsAngleToRotate_BD_2(float... _ballsAngleToRotate) {
            ballsAngleToRotate = new float[_ballsAngleToRotate.length];
            for (int i = 0; i < _ballsAngleToRotate.length; i++){
                ballsAngleToRotate[i] = _ballsAngleToRotate[i] * default_ballsAngleToRotate;
            }
            return this;
        }

        public LevelBuilder setBallsMaxAngle_BD_55(float... _ballsMaxAngle) {
            ballsMaxAngle = new float[_ballsMaxAngle.length];
            for (int i = 0; i < _ballsMaxAngle.length; i++){
                ballsMaxAngle[i] = _ballsMaxAngle[i] * default_ballsMaxAngle;
            }
            return this;
        }

        public LevelBuilder setBallsMinAngle_BD_35(float... _ballsMinAngle) {
            ballsMinAngle = new float[_ballsMinAngle.length];
            for (int i = 0; i < _ballsMinAngle.length; i++){
                ballsMinAngle[i] = _ballsMinAngle[i] * default_ballsMinAngle;
            }
            return this;
        }

        public LevelBuilder setBallsVelocityVariation_BD_0_1(float... _ballsVelocityVariation) {
            ballsVelocityVariation = new float[_ballsVelocityVariation.length];
            for (int i = 0; i < _ballsVelocityVariation.length; i++){
                ballsVelocityVariation[i] = _ballsVelocityVariation[i] * default_ballsVelocityVariation;
            }
            return this;
        }

        public LevelBuilder setBallsVelocityMax_BD_1_3(float... _ballsVelocityMax_BI) {
            ballsVelocityMax_BI = new float[_ballsVelocityMax_BI.length];
            for (int i = 0; i < _ballsVelocityMax_BI.length; i++){
                ballsVelocityMax_BI[i] = _ballsVelocityMax_BI[i] * default_ballsVelocityMax_BI;
            }
            return this;
        }

        public LevelBuilder setBallsVelocityMin_BD_0_6(float... _ballsVelocityMin_BI) {
            ballsVelocityMin_BI = new float[_ballsVelocityMin_BI.length];
            for (int i = 0; i < _ballsVelocityMin_BI.length; i++){
                ballsVelocityMin_BI[i] = _ballsVelocityMin_BI[i] * default_ballsVelocityMin_BI;
            }
            return this;
        }

        public LevelBuilder setBallsTargetsAppend(ArrayList<int[]> _ballsTargetsAppend) {
            ballsTargetsAppend = _ballsTargetsAppend;
            return this;
        }

        public LevelBuilder setBallsFree(boolean... _ballsFree) {
            ballsFree = new boolean[_ballsFree.length];
            System.arraycopy(_ballsFree, 0, ballsFree, 0, _ballsFree.length);
            return this;
        }

        public LevelBuilder setBarsQuantity(int _barsQuantity) {
            barsQuantity = _barsQuantity;
            return this;
        }

        public LevelBuilder setBarsWidth_BD_0_22(float... _barsWidth_BR) {
            barsWidth_BR = new float[_barsWidth_BR.length];
            for (int i = 0; i < _barsWidth_BR.length; i++){
                barsWidth_BR[i] = _barsWidth_BR[i] * default_barsWidth_BR;
            }
            return this;
        }

        public LevelBuilder setBarsHeight_BD_0_0175(float... _barsHeight_BR){
            barsHeight_BR = new float[_barsHeight_BR.length];
            for (int i = 0; i < _barsHeight_BR.length; i++){
                barsHeight_BR[i] = _barsHeight_BR[i] * default_barsHeight_BR;
            }
            return this;
        }

        public LevelBuilder setBarsX_B1(float... _barsX_BR) {
            barsX_BR = new float[_barsX_BR.length];
            System.arraycopy(_barsX_BR, 0, barsX_BR, 0, _barsX_BR.length);
            return this;
        }

        public LevelBuilder setBarsY_BD_0_024(float... _barsY_BR) {
            barsY_BR = new float[_barsY_BR.length];
            for (int i = 0; i < _barsY_BR.length; i++){
                barsY_BR[i] = _barsY_BR[i] * default_barsY_BR;
            }
            return this;
        }

        public LevelBuilder setBarsVX_BD_0_0045(float... _barsVX_BR) {
            barsVX_BR = new float[_barsVX_BR.length];
            for (int i = 0; i < _barsVX_BR.length; i++){
                barsVX_BR[i] = _barsVX_BR[i] * default_barsVX_BR;
            }
            return this;
        }

        public LevelBuilder setBarsVY(float... _barsVY_BR) {
            barsVY_BR = new float[_barsVY_BR.length];
            System.arraycopy(_barsVY_BR, 0, barsVY_BR, 0, _barsVY_BR.length);
            return this;
        }

        public LevelBuilder setBarsScaleVariation(ScaleVariationDataBuilder... _data){
            barsScaleVariationData = new ScaleVariationDataBuilder[_data.length];
            System.arraycopy(_data, 0, barsScaleVariationData, 0, _data.length);
            return this;
        }

        public LevelBuilder setBarsScaleVariationOff(){
            barsScaleVariationData = null;
            return this;
        }

        public LevelBuilder setTargetsWidth(float _targetsWidht_BR) {
            targetsWidht_BR = _targetsWidht_BR;
            return this;
        }

        public LevelBuilder setTargetsHeight(float _targetsHeight_BR) {
            targetsHeight_BR = _targetsHeight_BR;
            return this;
        }

        public LevelBuilder setTargetsMap(int [][] _targetsMap) {
            targetsMap = _targetsMap;
            return this;
        }

        public LevelBuilder setTargetsStates(int [] _targetsStates) {
            targetsStates = _targetsStates;
            return this;
        }

        public LevelBuilder setTargetsDistance(float _targetsDistance_BXR) {
            targetsDistance_BXR = _targetsDistance_BXR;
            return this;
        }

        public LevelBuilder setTargetsPadding(float _targetsPadding_BXR) {
            targetsPadding_BXR = _targetsPadding_BXR;
            return this;
        }

        public LevelBuilder setObstaclesQuantity(int _obstaclesQuantity) {
            obstaclesQuantity = _obstaclesQuantity;
            return this;
        }

        public LevelBuilder setObstaclesWidth(float... _obstaclesWidth_BR) {
            obstaclesWidth_BR = new float[_obstaclesWidth_BR.length];
            System.arraycopy(_obstaclesWidth_BR, 0, obstaclesWidth_BR, 0, _obstaclesWidth_BR.length);
            return this;
        }

        public LevelBuilder setObstaclesHeight(float... _obstaclesHeight_BR) {
            obstaclesHeight_BR = new float[_obstaclesHeight_BR.length];
            System.arraycopy(_obstaclesHeight_BR, 0, obstaclesHeight_BR, 0, _obstaclesHeight_BR.length);
            return this;
        }

        public LevelBuilder setObstaclesX(float... _obstaclesX_BR) {
            obstaclesX_BR = new float[_obstaclesX_BR.length];
            System.arraycopy(_obstaclesX_BR, 0, obstaclesX_BR, 0, _obstaclesX_BR.length);
            return this;
        }

        public LevelBuilder setObstaclesY(float... _obstaclesY_BR) {
            obstaclesY_BR = new float[_obstaclesY_BR.length];
            System.arraycopy(_obstaclesY_BR, 0, obstaclesY_BR, 0, _obstaclesY_BR.length);
            return this;
        }

        public LevelBuilder setObstaclesScaleVariation(ScaleVariationDataBuilder... _data){
            obstaclesScaleVariationData = new ScaleVariationDataBuilder[_data.length];
            System.arraycopy(_data, 0, obstaclesScaleVariationData, 0, _data.length);
            return this;
        }

        public LevelBuilder setObstaclesScaleVariationOff(){
            obstaclesScaleVariationData = null;
            return this;
        }

        public LevelBuilder setObstaclesPositionVariation(PositionVariationDataBuilder... _data){
            obstaclesPositionVariationData = new PositionVariationDataBuilder[_data.length];
            System.arraycopy(_data, 0, obstaclesPositionVariationData, 0, _data.length);
            return this;
        }

        public LevelBuilder setObstaclesPositionVariationOff(){
            obstaclesPositionVariationData = null;
            return this;
        }

        public LevelBuilder setWindowsQuantity(int _windowsQuantity) {
            windowsQuantity = _windowsQuantity;
            return this;
        }

        public LevelBuilder setWindowsY(float... _windowsY) {
            windowsY = new float[_windowsY.length];
            System.arraycopy(_windowsY, 0, windowsY, 0, _windowsY.length);
            return this;
        }

        public LevelBuilder setWindowsHeight(float... _windowsHeight) {
            windowsHeight = new float[_windowsHeight.length];
            System.arraycopy(_windowsHeight, 0, windowsHeight, 0, _windowsHeight.length);
            return this;
        }

        public LevelBuilder setWindowsQuantityOfLines(int... _windowsQuantityOfLines) {
            windowsQuantityOfLines = new int[_windowsQuantityOfLines.length];
            System.arraycopy(_windowsQuantityOfLines, 0, windowsQuantityOfLines, 0, _windowsQuantityOfLines.length);
            return this;
        }

        public LevelBuilder setWindowsDistance(float... _windowsDistance) {
            windowsDistance = new float[_windowsDistance.length];
            System.arraycopy(_windowsDistance, 0, windowsDistance, 0, _windowsDistance.length);
            return this;
        }

        public LevelBuilder setWindowsVelocity(float... _windowsVelocity) {
            windowsVelocity = new float[_windowsVelocity.length];
            System.arraycopy(_windowsVelocity, 0, windowsVelocity, 0, _windowsVelocity.length);
            return this;
        }

        public LevelBuilder setSpecialBallPercentage0_1(float percentage){
            specialBallPercentage = percentage;
            return this;
        }

        public LevelBuilder setWindType(int type){
            windType = type;
            return this;
        }

        public Level build() {
            return new Level();
        }
    }
}

/*
    static void changeDifficulty(int selectedValue) {
        if (selectedValue == 0){
            basePoints = POINTS_EASY;
            SaveGame.saveGame.currentDifficulty = DIFFICULTY_EASY;
            difficultyVelocityBarMultiplicator = BAR_EASY;
            difficultyVelocityObstacleMultiplicator = OBSTACLE_EASY;
            difficultyVelocityBallMultiplicator = BALL_EASY;
        } else if (selectedValue == 1){
            basePoints = POINTS_NORMAL;
            SaveGame.saveGame.currentDifficulty = DIFFICULTY_NORMAL;
            difficultyVelocityBarMultiplicator = BAR_NORMAL;
            difficultyVelocityObstacleMultiplicator = OBSTACLE_NORMAL;
            difficultyVelocityBallMultiplicator = BALL_NORMAL;
        } else if (selectedValue == 2){
            basePoints = POINTS_HARD;
            SaveGame.saveGame.currentDifficulty = DIFFICULTY_HARD;
            difficultyVelocityBarMultiplicator = BAR_HARD;
            difficultyVelocityObstacleMultiplicator = OBSTACLE_HARD;
            difficultyVelocityBallMultiplicator = BALL_HARD;
        } else if (selectedValue == 3){
            basePoints = POINTS_INSANE;
            SaveGame.saveGame.currentDifficulty = DIFFICULTY_INSANE;
            difficultyVelocityBarMultiplicator = BAR_INSANE;
            difficultyVelocityObstacleMultiplicator = OBSTACLE_INSANE;
            difficultyVelocityBallMultiplicator = BALL_INSANE;
        }
        SaveGame.saveGame.currentDifficulty = selectedValue;
    }
    */

    ____________________________________



package com.marcelslum.ultnogame;

import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by marcel on 02/08/2016.
 */
public class TutorialLoader {
    private static TutorialLoader ourInstance = new TutorialLoader();

    public static TutorialLoader getInstance() {
        return ourInstance;
    }

    private TutorialLoader() {
    }

    public static void loadTutorial(int levelNumber){

        final Timer timer = new Timer();
        final float gX = Game.gameAreaResolutionX;
        final float gY = Game.gameAreaResolutionY;
        float size = gX*0.035f;
        float width = gX*0.78f;
        float x = gX*0.1f;
        float y = gY*0.2f;

        switch (levelNumber){
            case 1:
                    // L1T1
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                    .position(x, y)
                                    .width(width)
                                    .size(size)
                                    .text(Utils.getStringResource( R.string.l1t1))
                                    .withArrow(gX *0.4f, gY *0.9f)
                                    .build()
                            )
                            .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                @Override
                                public void onShowBeforeAnim() {
                                        Game.balls.get(0).clearDisplay();
                                        Game.balls.get(0).isMovable = false;
                                        Game.bars.get(0).isMovable = true;

                                    }
                                }
                            )
                            .build()
                    );

                    // L1T2
                    Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox2")
                                .position(x, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l1t2))
                                .withArrow(gX *0.65f, gY *0.62f)
                                .build()
                        )
                       .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                            @Override
                            public void onShowBeforeAnim() {
                                    Game.balls.get(0).display();
                                    Game.balls.get(0).x = gX * 0.7f;
                                    Game.balls.get(0).y = gY * 0.7f;
                                    Game.bars.get(0).clearDisplay();
                                }
                            }
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {

                                    Utils.createAnimation3v(Game.balls.get(0), "translateX", "translateX", 2000,
                                        0f, 0f, 0.3f, gX * 0.2f, 1f, gX * 0.2f,  true, true).start();

                                    Utils.createAnimation3v(Game.balls.get(0), "translateY", "translateY", 2000,
                                        0f, 0f, 0.3f, gY * 0.285f, 1f, gY * 0.285f, true, true).start();

                                    // TODO xVermelho
                                    /*
                                        xVermelho.position = V(self.gameArea.resolution.x * 0.75, self.gameArea.resolution.y * 0.85);
                                        xVermelho.size= V(self.gameArea.resolution.x * 0.06, self.gameArea.resolution.y * 0.09);
                                        xVermelho.alpha = 0;
                                        xVermelho.display();
                                        ANIM.createAnimation(xVermelho, 'animXVermelho', 'alpha', 1500, [[0,0],[0.5,0.4],[1,0]], true, true, 0).start();
                                    */

                                }
                            }
                        )
                        .onUnshowBeforeAnim(new Tutorial.OnUnshowBeforeAnim() {
                            @Override
                            public void onUnshowBeforeAnim() {
                                    Game.balls.get(0).clearAnimations();
                                    // TODO xVermelho clearDisplay()
                                }
                            }
                        )
                        .build()
                    );
                    // L1T3
                    Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox3")
                                .position(x, y*2.5f)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource(R.string.l1t3))
                                .withArrow(gX *0.59f, gY *0.15f)
                                .build()
                        )
                       .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                            @Override
                            public void onShowBeforeAnim() {
                                    Game.balls.get(0).x = gX * 0.4f;
                                    Game.balls.get(0).y = gY * 0.3f;
                                }
                            }
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {
                                    Utils.createAnimation3v(Game.balls.get(0), "translateX", "translateX", 2000,
                                        0f, 0f, 0.3f, gX * 0.19f, 1f, gX * 0.19f, true, true).start();
                                    Utils.createAnimation3v(Game.balls.get(0), "translateY", "translateY", 2000,
                                        0f, 0f, 0.3f, -gY * 0.25f,  1f, -gY * 0.25f, true, true).start();
                                    Utils.createAnimation3v(Game.targets.get(5), "alpha", "alpha", 2000,
                                        0f, 1f, 0.35f, 1f, 0.5f, 0f, true, true).start();
                                }
                            }
                        )
                        .build()
                    );

                    // L1T4
                    Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox4")
                                .position(x, y*1.5f)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l1t4))
                                .build()
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {
                                    Game.balls.get(0).clearAnimations();
                                    Game.targets.get(5).clearAnimations();
                                    Game.targets.get(5).clearDisplay();
                                    Game.balls.get(0).x = gX * 0.59f;
                                    Game.balls.get(0).y = gY * 0.05f;
                                    Game.scorePanel.setValue(100, true, 500, false);
                                }
                            }
                        )
                        .build()
                    );

                    // L1T5
                    Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox5")
                                .position(x, y*2f)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l1t5))
                                .build()
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {
                                    for (int i = 0; i < Game.targets.size(); i++){
                                        if (i != 5){
                                            Game.targets.get(i).reduceAlpha(500, 0f);
                                        }
                                    }
                                    Game.balls.get(0).x = gX * 0.59f;
                                    Game.balls.get(0).y = gY * 0.05f;
                                    Game.scorePanel.setValue(900, true, 500, false);
                                }
                            }
                        )
                        .build()
                    );

                    // L1T6
                    final TimerTask ttl1t6 = new TimerTask() {
                        @Override
                        public void run() {
                            Game.scorePanel.setValue(Game.scorePanel.value - 10, false, 1000, false);
                        }
                    };

                    Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox6")
                                .position(x, y*2f)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l1t6))
                                .withArrow(gX *0.5f, gY *0.95f)
                                .build()
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {
                                    timer.scheduleAtFixedRate(ttl1t6, 0, 1000);
                                }
                            }
                        )
                        .build()
                    );

                    // L1T7
                    Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox7")
                                .position(x, y*2f)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l1t7))
                                .withoutArrow()
                                .build()
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {
                                    ttl1t6.cancel();
                                    timer.cancel();
                                    timer.purge();
                                }
                            }
                        )
                        .build()
                    );
                    break;

                    case 2:
                    // L2T1
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                    .position(x, y)
                                    .width(width)
                                    .size(size)
                                    .text(Utils.getStringResource( R.string.l2t1))
                                    .withoutArrow()
                                    .build()
                            )
                            .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                @Override
                                public void onShowBeforeAnim() {
                                        Game.bars.get(0).isMovable = false;
                                        Game.balls.get(0).isMovable = false;
                                        Game.balls.get(0).x = gX * 0.3f;
                                        Game.balls.get(0).y = gY * 0.72f;
                                        Game.bars.get(0).x = gX * 0.62f;
                                    }
                                }
                            )
                            .build()
                    );

                    // L2T2
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox2")
                                    .position(x, y)
                                    .width(width)
                                    .size(size)
                                    .text(Utils.getStringResource( R.string.l2t2))
                                    .withoutArrow()
                                    .build()
                            )
                            .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                @Override
                                public void onShowBeforeAnim() {
                                        Game.balls.get(0).x = gX * 0.3f;
                                        Game.balls.get(0).y = gY * 0.73f;
                                    }
                                }
                            )
                            .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {

                                        Utils.createAnimation4v(Game.balls.get(0), "translateX", "translateX", 3000,
                                            0f, 0f, 0.25f, gX*0.15f, 0.5f, gX*0.6f, 1f, gX*0.6f, true, true).start();
                                        Utils.createAnimation4v(Game.balls.get(0), "translateY", "translateY", 3000,
                                            0f, 0f, 0.25f, gY*0.244f, 0.5f, -gY*0.32f, 1f, -gY*0.32f, true, true).start();
                                        Utils.createAnimation3v(Game.bars.get(0), "translateX", "translateX", 3000,
                                            0f, 0f, 0.5f, -gX*0.5f, 1f, -gX*0.5f, true, true).start();

                                        Game.ballDataPanel.clearDisplay();
                                        Animation animForPanel = Utils.createAnimation3v(Game.balls.get(0), "numberForAnimation", "numberForAnimation", 3000,
                                                0f, 1f, 0.25f, 2f, 1f, 3f, true, false);
                                        animForPanel.setOnChangeNotFluid(new Animation.OnChange() {
                                            @Override
                                            public void onChange() {
                                                if (Game.balls.get(0).numberForAnimation == 1f){
                                                    Game.ballDataPanel.setData(0.5f, 0f, false);
                                                } else if (Game.balls.get(0).numberForAnimation == 2f){
                                                    Game.ballDataPanel.setData(0.6f, 0f, true);
                                                }
                                            }
                                        });
                                        animForPanel.start();
                                    }

                                }
                            )
                            .build()
                    );

                    // L2T3
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                    new TextBoxBuilder("textBox3")
                                            .position(x*0.5f, y)
                                            .width(width)
                                            .size(size)
                                            .text(Utils.getStringResource(R.string.l2t3))
                                            .withoutArrow()
                                            .build()
                            ).build()
                    );

                    // L2T4
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                    new TextBoxBuilder("textBox4")
                                            .position(x, y)
                                            .width(width)
                                            .size(size)
                                            .text(Utils.getStringResource( R.string.l2t4))
                                            .withArrow(gX *0.5f, gY *0.95f)
                                            .build()
                            )

                            .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {
                                    Game.ballDataPanel.display();
                                    Utils.createAnimation3v(Game.ballDataPanel, "alpha", "alpha", 500, 0f, 1f, 0.5f, 0.1f, 1f, 1f, true, true).start();
                                }
                            })
                            .onUnshowBeforeAnim(new Tutorial.OnUnshowBeforeAnim() {
                                @Override
                                public void onUnshowBeforeAnim() {
                                    Game.ballDataPanel.clearAnimations();
                                }
                            })
                            .build()
                    );

                    // L2T5
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                    new TextBoxBuilder("textBox5")
                                            .position(x, y)
                                            .width(width)
                                            .size(size)
                                            .text(Utils.getStringResource( R.string.l2t5))
                                            .withoutArrow()
                                            .build()
                            )

                            .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                @Override
                                public void onShowAfterAnim() {

                                    // desliga a animação do painel em relação à bola
                                    Game.balls.get(0).getAnimationByName("numberForAnimation").setOnChangeNotFluid(new Animation.OnChange() {
                                        @Override
                                        public void onChange() {

                                        }
                                    });
                                }
                            })
                            .build()
                    );

                    // L2T6
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                    new TextBoxBuilder("textoBox6")
                                            .position(x, y)
                                            .width(width)
                                            .size(size)
                                            .text(Utils.getStringResource(R.string.l2t6))
                                            .withArrow(gX *0.5f, gY *0.95f)
                                            .build()
                            )
                            .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                @Override
                                public void onShowBeforeAnim() {
                                    // cria uma animação que mostra o máximo e o mínimo
                                    Animation animPanel = Utils.createAnimation3v(Game.ballDataPanel, "numberForAnimation", "numberForAnimation", 1000,
                                            0f, 1f, 0.5f, 2f, 1f, 3f, true, false);
                                    animPanel.setOnChangeNotFluid(new Animation.OnChange() {
                                        @Override
                                        public void onChange() {
                                            if (Game.ballDataPanel.numberForAnimation == 1f){
                                                Game.ballDataPanel.setData(0.0f, 0f, false);
                                            } else if (Game.ballDataPanel.numberForAnimation == 2f){
                                                Game.ballDataPanel.setData(1f, 0f, false);
                                            }
                                        }
                                    });
                                    animPanel.start();
                                }
                            })

                            .onUnshowAfterAnim(new Tutorial.OnUnshowAfterAnim() {
                                @Override
                                public void onUnshowAfterAnim() {




                                    Game.ballDataPanel.clearAnimations();
                                    Game.ballDataPanel.setData(0f, 0f, false);
                                }
                            })

                            .build()
                    );

                    // L2T7
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                    new TextBoxBuilder("textoBox7")
                                            .position(x, y)
                                            .width(width)
                                            .size(size)
                                            .text(Utils.getStringResource(R.string.l2t7))
                                            .withoutArrow()
                                            .build()
                            )

                            .build()
                    );

                    // L2T8
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                    new TextBoxBuilder("textBox8")
                                            .position(x, y)
                                            .width(width)
                                            .size(size)
                                            .text(Utils.getStringResource(R.string.l2t8))
                                            .withoutArrow()
                                            .build()
                            )
                        .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                @Override
                                public void onShowBeforeAnim() {
                                    Game.imageTutorialDown = new Image(
                                        "anguloDown", gX*0.348f, (gY * 0.975f) - (gX * 0.1f), gX * 0.20f, gX * 0.1f, Texture.TEXTURE_BARS, 1f/1024f, 255f/1024f, 898f/1024f, 1023f/1024f);
                                    Game.imageTutorialDown.display();
                                    Utils.createAnimation3v(Game.imageTutorialDown, "alpha", "alpha", 1500, 0f, 1f, 0.5f, 0.6f, 1f, 1f, true, true).start();
                                }
                            })
                        .onUnshowBeforeAnim(new Tutorial.OnUnshowBeforeAnim() {
                            @Override
                            public void onUnshowBeforeAnim() {
                                Game.imageTutorialDown = null;
                            }
                        })

                        .build()
                    );

                    // L2T9
                    Level.levelObject.tutorials.add(
                            new Tutorial.TutorialBuilder(
                                    new TextBoxBuilder("textoBox9")
                                            .position(x, y)
                                            .width(width)
                                            .size(size)
                                            .text(Utils.getStringResource(R.string.l2t9))
                                            .withArrow(gX *0.5f, gY *0.95f)
                                            .build()
                            )
                            .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                @Override
                                public void onShowBeforeAnim() {
                                    Game.balls.get(0).getAnimationByName("numberForAnimation").setOnChangeNotFluid(new Animation.OnChange() {
                                        @Override
                                        public void onChange() {
                                            if (Game.balls.get(0).numberForAnimation == 1f){
                                                Game.ballDataPanel.setData(0.0f, 0.5f, false);
                                            } else if (Game.balls.get(0).numberForAnimation == 2f){
                                                Game.ballDataPanel.setData(0.0f, 0.43f, true);
                                            }
                                        }
                                    });
                                }
                            })
                            .onUnshowAfterAnim(new Tutorial.OnUnshowAfterAnim() {
                                @Override
                                public void onUnshowAfterAnim() {

                                    Game.balls.get(0).getAnimationByName("numberForAnimation").setOnChangeNotFluid(new Animation.OnChange() {
                                        @Override
                                        public void onChange() {
                                        }
                                    });
                                    Game.ballDataPanel.setData(0.0f, 0.0f, false);
                                }
                            })
                            .build()
                    );



                // L2T10
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textBox10")
                                    .position(x, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l2t10))
                                .withoutArrow()
                                .build()
                        )
                        .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                            @Override
                            public void onShowBeforeAnim() {
                                    Game.balls.get(0).clearAnimations();
                                    Game.bars.get(0).clearAnimations();
                                    Game.balls.get(0).x = gX * 0.3f;
                                    Game.balls.get(0).y = gY * 0.72f;
                                    Game.bars.get(0).x = gX * 0.1f;
                                }
                            }
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                            @Override
                            public void onShowAfterAnim() {
                                Utils.createAnimation4v(Game.balls.get(0), "translateX", "translateX", 3000,
                                    0f, 0f, 0.25f, gX*0.15f, 0.5f, gX*0.198f, 1f, gX*0.198f, true, true).start();
                                Utils.createAnimation4v(Game.balls.get(0), "translateY", "translateY", 3000,
                                    0f, 0f, 0.25f, gY*0.245f, 0.5f, gY*0.12f, 1f, gY*0.12f, true, true).start();
                                Utils.createAnimation3v(Game.bars.get(0), "translateX", "translateX", 3000,
                                    0f, 0f, 0.5f, gX*0.4f, 1f, gX*0.4f, true, true).start();

                                Animation animForPanel = Utils.createAnimation3v(Game.balls.get(0), "numberForAnimation", "numberForAnimation", 3000,
                                        0f, 1f, 0.25f, 2f, 1f, 3f, true, false);
                                animForPanel.setOnChangeNotFluid(new Animation.OnChange() {
                                    @Override
                                    public void onChange() {
                                        if (Game.balls.get(0).numberForAnimation == 1f){
                                            Game.ballDataPanel.setData(0.5f, 0.5f, false);
                                        } else if (Game.balls.get(0).numberForAnimation == 2f){
                                            Game.ballDataPanel.setData(0.4f, 0.6f, true);
                                        }
                                    }
                                });
                                animForPanel.start();
                            }
                        })
                        .build()
                );

                // L2T11
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textBox11")
                                .position(x, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource(R.string.l2t11))
                                .withoutArrow()
                                .build()
                        )
                        .build()
                );

                // L2T12
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox12")
                                .position(x, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource(R.string.l2t12))
                                .withoutArrow()
                                .build()
                        )
                        .build()
                );


                // L2T13
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox13")
                                .position(x, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource(R.string.l2t13))
                                .withoutArrow()
                                .build()
                        )

                        .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                    @Override
                                    public void onShowBeforeAnim() {
                                        Game.imageTutorialDown = new Image(
                                                "anguloUp", gX*0.348f, (gY * 0.975f) - (gX * 0.1f), gX * 0.20f, gX * 0.1f, Texture.TEXTURE_BARS, 1f/1024f, 255f/1024f, 770f/1024f, 895f/1024f);
                                        Game.imageTutorialDown.display();
                                        Utils.createAnimation3v(Game.imageTutorialDown, "alpha", "alpha", 1500, 0f, 1f, 0.5f, 0.6f, 1f, 1f, true, true).start();
                                    }
                        })
                        .onUnshowBeforeAnim(new Tutorial.OnUnshowBeforeAnim() {
                            @Override
                            public void onUnshowBeforeAnim() {
                                Game.imageTutorialDown = null;
                                Game.balls.get(0).clearAnimations();
                                Game.bars.get(0).clearAnimations();
                            }
                        })

                        .build()
                );

                // L2T14
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textBox14")
                                .position(x*0.5f, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource(R.string.l2t14))
                                .withoutArrow()
                                .build()
                        )
                        .build()
                );

                // L2T15
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textBox15")
                                .position(x, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource(R.string.l2t15))
                                        .withoutArrow()
                                .build()
                        )
                        .build()
                );



                break;

                case 4:
                // L4T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textBox1")
                                .position(x, y*2.2f)
                                .width(width)
                                .size(size)
                                    .text(Utils.getStringResource( R.string.l4t1))
                                .withArrow(gX*0.5f, gY*0.34f)
                                .build()
                        )
                        .build()
                );
                break;

                case 7:
                // L7T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textBox1")
                                .position(x, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l7t1))
                                .withArrow(gX*0.5f, gY*0.08f)
                                .build()
                        )
                        .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                            @Override
                            public void onShowBeforeAnim() {
                                Game.balls.get(0).clearDisplay();
                                Game.targets.get(4).setUvInfo(Target.TARGET_GREEN);
                                }
                            }
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                            @Override
                            public void onShowAfterAnim() {
                                    Utils.createAnimation3v(Game.targets.get(4), "alpha", "alpha", 3000,
                                        0f, 1f, 0.75f, 0.99f, 1f, 0, true, true).start();
                                    ArrayList<float[]> valuesAnimTarget = new ArrayList<>();
                                        valuesAnimTarget.add(new float[]{0f,3f});
                                        valuesAnimTarget.add(new float[]{0.25f,2f});
                                        valuesAnimTarget.add(new float[]{0.5f,1f});
                                        valuesAnimTarget.add(new float[]{0.75f,0f});
                                    Animation animTarget = new Animation(Game.targets.get(4), "animTarget", "numberForAnimation", 3000,
                                        valuesAnimTarget, true, false);
                                        animTarget.setOnChangeNotFluid(new Animation.OnChange() {
                                            @Override
                                            public void onChange() {
                                                if (Game.targets.get(4).numberForAnimation == 3f){
                                                    Game.targets.get(4).setUvInfo(Target.TARGET_GREEN);
                                                } else if (Game.targets.get(4).numberForAnimation == 2f) {
                                                    Game.targets.get(4).setUvInfo(Target.TARGET_BLUE);
                                                } else if (Game.targets.get(4).numberForAnimation == 1f) {
                                                    Game.targets.get(4).setUvInfo(Target.TARGET_BLACK);
                                                }
                                            }
                                        });
                                        animTarget.start();
                                    }
                                }
                            )
                        .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                  @Override
                                  public void onShowBeforeAnim() {
                                      Game.targets.get(4).clearAnimations();
                                      Game.targets.get(4).alpha = 1f;
                                      Game.targets.get(4).setUvInfo(Target.TARGET_BLACK);
                                  }
                              }
                        )
                        .build()
                );
                break;

                case 9:
                // L9T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox1")
                                .position(x, y)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l9t1))
                                .withoutArrow()
                                .build()
                        )
                        .build()
                );

                // L9T2
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox2")
                                .position(x*0.5f, y*2f)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l9t2))
                                .withArrow(gX*0.5f, gY*0.25f)
                                .build()
                        )
                        .build()
                );

                // L9T3
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                            new TextBoxBuilder("textoBox3")
                                .position(x*0.5f, y*2.5f)
                                .width(width)
                                .size(size)
                                .text(Utils.getStringResource( R.string.l9t3))
                                .withoutArrow()
                                .build()
                        )
                        .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                 @Override
                                 public void onShowBeforeAnim() {
                                     float posX = gX * 0.6f;
                                     float posY = gY * 0.28f;

                                     final Ball ball1 = Game.balls.get(0);
                                     ball1.x = posX;
                                     ball1.y = posY;

                                     float size = ball1.radius;

                                     final Ball ball2 = new Ball("ball2", posX - size * 2, posY - size * 2, size, Ball.COLOR_BALL_BLUE);
                                     ball2.isCollidable = false;
                                     ball2.alpha = 0f;
                                     ball2.display();

                                     final Ball ball3 = new Ball("ball2", posX + size * 2, posY - size * 2, size, Ball.COLOR_BALL_ORANGE);
                                     ball3.isCollidable = false;
                                     ball3.alpha = 0f;
                                     ball3.display();

                                     final Ball ball4 = new Ball("ball2", posX - size * 2, posY + size * 2, size, Ball.COLOR_BALL_RED);
                                     ball4.isCollidable = false;
                                     ball4.alpha = 0f;
                                     ball4.display();

                                     final Ball ball5 = new Ball("ball2", posX + size * 2, posY + size * 2, size, Ball.COLOR_BALL_PINK);
                                     ball5.isCollidable = false;
                                     ball5.alpha = 0f;
                                     ball5.display();

                                     Game.addBall(ball2);
                                     Game.addBall(ball3);
                                     Game.addBall(ball4);
                                     Game.addBall(ball5);

                                     Utils.createAnimation3v(ball1, "translateX", "translateX", 5000,
                                             0f, -gX * 0.15f, 0.2f, 0f, 1f, 0f, true, true).start();

                                     Utils.createAnimation4v(ball1, "translateY", "translateY", 5000,
                                             0f, -gY * 0.03f, 0.1f, -gY * 0.085f, 0.2f, 0f, 1f, 0f, true, true).start();

                                     Utils.createAnimation4v(ball1, "alpha", "alpha", 5000,
                                             0f, 1f, 0.2f, 1f, 0.25f, 0f, 1f, 0f, true, true).start();

                                     ArrayList<float[]> valuesAnimBall1 = new ArrayList<>();
                                     valuesAnimBall1.add(new float[]{0f, 1f});
                                     valuesAnimBall1.add(new float[]{0.1f, 0f});
                                     Animation animBall1 = new Animation(ball1, "color", "numberForAnimation", 3000,
                                             valuesAnimBall1, true, false);
                                     animBall1.setOnChangeNotFluid(new Animation.OnChange() {
                                         @Override
                                         public void onChange() {
                                             if (ball1.numberForAnimation == 1f) {
                                                 ball1.setTextureMapAndUvData(Ball.COLOR_BALL_BLACK);
                                             } else if (ball1.numberForAnimation == 0f) {
                                                 ball1.setTextureMapAndUvData(Ball.COLOR_BALL_RED);
                                             }
                                         }
                                     });
                                     animBall1.start();

                                     Utils.createAnimation4v(ball2, "alpha", "alpha", 5000,
                                             0f, 0f, 0.23f, 0f, 0.3f, 1f, 1f, 1f, true, true).start();
                                     Utils.createAnimation4v(ball3, "alpha", "alpha", 5000,
                                             0f, 0f, 0.23f, 0f, 0.3f, 1f, 1f, 1f, true, true).start();
                                     Utils.createAnimation4v(ball4, "alpha", "alpha", 5000,
                                             0f, 0f, 0.23f, 0f, 0.3f, 1f, 1f, 1f, true, true).start();
                                     Utils.createAnimation4v(ball5, "alpha", "alpha", 5000,
                                             0f, 0f, 0.23f, 0f, 0.3f, 1f, 1f, 1f, true, true).start();

                                     float desloc = ball1.radius * 4f;

                                     Utils.createAnimation4v(ball2, "translateX", "translateX", 5000,
                                             0f, 0f, 0.25f, 0f, 0.4f, -desloc, 1f, -desloc,  true, true).start();
                                     Utils.createAnimation4v(ball3, "translateX", "translateX", 5000,
                                             0f, 0f, 0.25f, 0f, 0.4f, desloc, 1f, desloc, true, true).start();
                                     Utils.createAnimation4v(ball4, "translateX", "translateX", 5000,
                                             0f, 0f, 0.25f, 0f, 0.4f, -desloc, 1f, -desloc, true, true).start();
                                     Utils.createAnimation4v(ball5, "translateX", "translateX", 5000,
                                             0f, 0f, 0.25f, 0f, 0.4f, desloc, 1f, desloc, true, true).start();

                                     Utils.createAnimation4v(ball2, "translateY", "translateY", 5000,
                                             0f, 0f, 0.25f, 0f, 0.4f, -desloc, 1f, -desloc, true, true).start();
                                     Utils.createAnimation4v(ball3, "translateY", "translateY", 5000,
                                             0f, 0f, 0.25f, 0f, 0.4f, -desloc, 1f, -desloc, true, true).start();
                                     Utils.createAnimation4v(ball4, "translateY", "translateY", 5000,
                                             0f, 0f, 0.25f, 0f, 0.4f, desloc, 1f, desloc, true, true).start();
                                     Utils.createAnimation4v(ball5, "translateY", "translateY", 5000,
                                             0f, 0f, 0.25f, 0f, 0.4f, desloc, 1f, desloc, true, true).start();

                                     Utils.createAnimation4v(Game.targets.get(35), "alpha", "alpha", 5000,
                                             0f, 1f, 0.1f, 1f, 0.15f, 0f, 1f, 0f, true, true).start();

                                 }
                             }
                        )
                        .onUnshowAfterAnim(new Tutorial.OnUnshowAfterAnim() {
                                    @Override
                                    public void onUnshowAfterAnim() {
                                    Game.balls.get(0).clearAnimations();
                                    Game.balls.get(1).clearAnimations();
                                    Game.balls.get(2).clearAnimations();
                                    Game.balls.get(3).clearAnimations();
                                    Game.balls.get(4).clearAnimations();

                                    Game.balls.get(0).clearDisplay();
                                    Game.targets.get(35).clearAnimations();
                                    Game.targets.get(35).alpha = 0f;

                                    float desloc = Game.balls.get(1).radius * 4;
                                    Game.balls.get(1).translate(-desloc, -desloc);
                                    Game.balls.get(2).translate(desloc, -desloc);
                                    Game.balls.get(3).translate(-desloc, desloc);
                                    Game.balls.get(4).translate(desloc, desloc);
                                }
                            }
                        )
                        .build()
                );
                // L9T4
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox4")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t4))
                                        .withoutArrow()
                                        .build()
                        )
                                .build()
                );
                // L9T5
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox5")
                                        .position(x*0.5f, y*2f)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t5))
                                        .withArrow(gX*0.50f, gY*0.97f)
                                        .build()
                        )
                        .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                            @Override
                            public void onShowAfterAnim() {
                                Game.ballGoalsPanel.setValues(4, 1, 0);
                            }
                        })
                        .build()
                );

                // L6T6
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox6")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t6))
                                        .withArrow(gX*0.50f, gY*0.97f)
                                        .build()
                        )
                                .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                    @Override
                                    public void onShowAfterAnim() {

                                    }
                                })
                                .build()
                );
                // L6T7
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox7")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t7))
                                        .withArrow(gX*0.50f, gY*0.97f)
                                        .build()
                        )
                                .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                    @Override
                                    public void onShowAfterAnim() {

                                    }
                                })
                                .build()
                );

                // L6T8
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox8")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t8))
                                        .withArrow(gX*0.53f, gY*0.97f)
                                        .build()
                                )
                                .build()
                );


                // L6T9
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox9")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t9))
                                        .withArrow(gX*0.53f, gY*0.97f)
                                        .build()
                        )
                                .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                    @Override
                                    public void onShowAfterAnim() {

                                        Utils.createAnimation3v(Game.balls.get(2), "translateX", "translateX", 3000, 0f, 0f, 0.3f, Game.gameAreaResolutionX * 0.32f, 1f, Game.gameAreaResolutionX * 0.32f, true, true).start();
                                        Utils.createAnimation3v(Game.balls.get(3), "translateX", "translateX", 3000, 0f, 0f, 0.25f, Game.gameAreaResolutionX * 0.25f, 1f, Game.gameAreaResolutionX * 0.25f, true, true).start();
                                        Utils.createAnimation3v(Game.balls.get(4), "translateX", "translateX", 3000, 0f, 0f, 0.25f, Game.gameAreaResolutionX * 0.25f, 1f, Game.gameAreaResolutionX * 0.25f, true, true).start();

                                        Utils.createAnimation3v(Game.balls.get(2), "translateY", "translateY", 3000, 0f, 0f, 0.3f, Game.gameAreaResolutionY * 0.775f, 1f, Game.gameAreaResolutionY * 0.775f, true, true).start();
                                        Utils.createAnimation3v(Game.balls.get(3), "translateY", "translateY", 3000, 0f, 0f, 0.25f, Game.gameAreaResolutionY * 0.63f, 1f, Game.gameAreaResolutionY * 0.63f, true, true).start();
                                        Utils.createAnimation3v(Game.balls.get(4), "translateY", "translateY", 3000, 0f, 0f, 0.25f, Game.gameAreaResolutionY * 0.63f, 1f, Game.gameAreaResolutionY * 0.63f, true, true).start();

                                        Utils.createAnimation3v(Game.balls.get(2), "alpha", "alpha", 3000, 0f, 1f, 0.3f, 1f, 0.45f, 0f, true, true).start();
                                        Utils.createAnimation3v(Game.balls.get(3), "alpha", "alpha", 3000, 0f, 1f, 0.25f, 1f, 0.4f, 0f, true, true).start();
                                        Utils.createAnimation3v(Game.balls.get(4), "alpha", "alpha", 3000, 0f, 1f, 0.25f, 1f, 0.4f, 0f, true, true).start();

                                        ArrayList<float[]> valuesAnimPanel = new ArrayList<>();
                                        valuesAnimPanel.add(new float[]{0f,4f});
                                        valuesAnimPanel.add(new float[]{0.25f,2f});
                                        valuesAnimPanel.add(new float[]{0.3f,1f});
                                        valuesAnimPanel.add(new float[]{1f,1f});
                                        Animation animPanel = new Animation(Game.balls.get(2), "numberForAnimation", "numberForAnimation", 3000,
                                                valuesAnimPanel, true, false);
                                        animPanel.setOnChangeNotFluid(new Animation.OnChange() {
                                            @Override
                                            public void onChange() {
                                                if (Game.balls.get(2).numberForAnimation == 4f){
                                                    Game.ballGoalsPanel.setValues(4, 1, 0);
                                                } else if (Game.balls.get(2).numberForAnimation == 3f){
                                                    Game.ballGoalsPanel.setValues(3, 1, 0);
                                                } else if (Game.balls.get(2).numberForAnimation == 2f) {
                                                    Game.ballGoalsPanel.setValues(2, 1, 0);
                                                } else if (Game.balls.get(2).numberForAnimation == 1f) {
                                                    Game.ballGoalsPanel.setValues(1, 1, 0);
                                                }
                                            }
                                        });
                                        animPanel.start();
                                    }
                                })
                                .onUnshowAfterAnim(new Tutorial.OnUnshowAfterAnim() {
                                    @Override
                                    public void onUnshowAfterAnim() {
                                        Game.balls.get(2).clearAnimations();
                                        Game.balls.get(3).clearAnimations();
                                        Game.balls.get(4).clearAnimations();
                                        Game.ballGoalsPanel.setValues(4, 1, 0);
                                    }
                                })
                                .build()
                );

                // L6T10
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox10")
                                        .position(x, y*2.5f)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t10))
                                        .withoutArrow()
                                        .build()
                        )
                                .build()
                );

                // L9T11
                String textL9T11 = Utils.getStringResource(R.string.l9t11f);;
                // TODO definir pontuação

                /*
                if (SaveGame.saveGame.currentDifficulty == Game.DIFFICULTY_EASY){
                    textL9T11 = Utils.getStringResource(R.string.l9t11f);
                } else if (SaveGame.saveGame.currentDifficulty == Game.DIFFICULTY_NORMAL){
                    textL9T11 = Utils.getStringResource(R.string.l9t11n);
                } else if (SaveGame.saveGame.currentDifficulty == Game.DIFFICULTY_HARD){
                    textL9T11 = Utils.getStringResource(R.string.l9t11d);
                } else{
                    textL9T11 = Utils.getStringResource(R.string.l9t11i);
                }
                */

                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox11")
                                        .position(x, y*2.5f)
                                        .width(width)
                                        .size(size)
                                        .text(textL9T11)
                                        .withoutArrow()
                                        .build()
                                )
                                .onShowBeforeAnim(new Tutorial.OnShowBeforeAnim() {
                                    @Override
                                    public void onShowBeforeAnim() {
                                        Utils.createAnimation3v(Game.balls.get(4), "translateX", "translateX", 3000, 0f, 0f, 0.25f, Game.gameAreaResolutionX * 0.06f, 1f, Game.gameAreaResolutionX * 0.061f, true, true).start();
                                        Utils.createAnimation3v(Game.balls.get(4), "translateY", "translateY", 3000, 0f, 0f, 0.25f, -Game.gameAreaResolutionY * 0.16f, 1f, -Game.gameAreaResolutionY * 0.16f, true, true).start();
                                        Utils.createAnimation4v(Game.targets.get(37), "alpha", "alpha", 3000, 0f, 1f, 0.25f, 1f, 0.3f, 0f, 1f, 0f, true, true).start();


                                        ArrayList<float[]> valuesAnimPoints = new ArrayList<>();
                                        valuesAnimPoints.add(new float[]{0f,2f});
                                        valuesAnimPoints.add(new float[]{0.25f,1f});
                                        valuesAnimPoints.add(new float[]{1f,0f});
                                        Animation animPoints = new Animation(Game.balls.get(4), "numberForAnimation", "numberForAnimation", 3000,
                                                valuesAnimPoints, true, false);
                                        animPoints.setOnChangeNotFluid(new Animation.OnChange() {
                                            @Override
                                            public void onChange() {
                                                if (Game.balls.get(4).numberForAnimation == 2f){
                                                    Game.scorePanel.setValue(0, false, 0, false);
                                                }
                                                if (Game.balls.get(4).numberForAnimation == 1f){
                                                    Game.scorePanel.setValue(800, true, 1000, false);
                                                    Game.targets.get(37).showPoints(800);
                                                }
                                            }
                                        });
                                        animPoints.start();
                                    }
                                })
                                .onUnshowBeforeAnim(new Tutorial.OnUnshowBeforeAnim() {
                                    @Override
                                    public void onUnshowBeforeAnim() {
                                        Game.balls.get(4).clearAnimations();
                                        Game.targets.get(37).clearAnimations();
                                        Game.targets.get(37).reduceAlpha(100, 0f);
                                    }
                                })

                                .build()
                );

                // L6T12
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox12")
                                        .position(x, y*2.5f)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t12))
                                        .withoutArrow()
                                        .build()
                        )
                                .onShowAfterAnim(new Tutorial.OnShowAfterAnim() {
                                    @Override
                                    public void onShowAfterAnim() {
                                        for (int i = 0; i < Game.targets.size(); i++) {
                                            if (i != 37) {
                                                Game.targets.get(i).reduceAlpha(500, 0);
                                            }
                                        }

                                        Game.scorePanel.setValue(10000, true, 1000, false);

                                    ArrayList<float[]> valuesScoreAnim = new ArrayList<>();
                                        valuesScoreAnim.add(new float[]{0f,5f});
                                        valuesScoreAnim.add(new float[]{0.2f,4f});
                                        valuesScoreAnim.add(new float[]{0.4f,3f});
                                        valuesScoreAnim.add(new float[]{0.6f,2f});
                                        valuesScoreAnim.add(new float[]{0.8f,1f});
                                        valuesScoreAnim.add(new float[]{1f,0f});
                                    Animation animScore = new Animation(Game.balls.get(4), "numberForAnimation", "numberForAnimation",
                                            10000, valuesScoreAnim, false, false);
                                        animScore.setOnChangeNotFluid(new Animation.OnChange() {
                                        @Override
                                        public void onChange() {
                                            if (Game.balls.get(4).numberForAnimation == 4f){
                                                Game.scorePanel.setValue(7500, true, 1000, true);
                                                Game.scorePanel.showMessage("+ 50%", 1000);
                                                Game.ballGoalsPanel.setValues(3, 1, 0);
                                                Game.balls.get(3).clearDisplay();
                                            } else if (Game.balls.get(4).numberForAnimation == 3f){
                                                Game.scorePanel.setValue(11125, true, 1000, true);
                                                Game.scorePanel.showMessage("+ 50%", 1000);
                                                Game.ballGoalsPanel.setValues(2, 1, 0);
                                                Game.balls.get(2).clearDisplay();
                                            } else if (Game.balls.get(4).numberForAnimation == 2f){
                                                Game.scorePanel.setValue(16875, true, 1000, true);
                                                Game.scorePanel.showMessage("+ 50%", 1000);
                                                Game.ballGoalsPanel.setValues(1, 1, 0);
                                                Game.balls.get(1).clearDisplay();
                                            }
                                        }
                                    });
                                        animScore.start();
                                    }
                                })
                                .build()
                );

                // L9T13
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox13")
                                        .position(x, y*2.5f)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t13))
                                        .withoutArrow()
                                        .build()
                        )
                                .build()
                );

                // L6T14
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textoBox14")
                                        .position(x, y*2.5f)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l9t14))
                                        .withoutArrow()
                                        .build()
                        )
                                .build()
                );
                break;


            case 12:
                // L12T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l12t1))
                                        .build()
                        )
                                .build()
                );
                break;

            case 16:
                // L16T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l16t1))
                                        .build()
                        )
                                .build()
                );
                break;

            case 19:
                // L19T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l19t1))
                                        .build()
                        )
                                .build()
                );
                break;

            case 20:
                // L20T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l20t1))
                                        .build()
                        )
                                .build()
                );
                break;

            case 21:
                // L21T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l21t1))
                                        .build()
                        )
                                .build()
                );
                break;

            case 24:
                // L24T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                        .position(x*0.25f, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l24t1))
                                        .build()
                        )
                                .build()
                );
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox2")
                                        .position(x*0.25f, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l24t2))
                                        .withArrow(gX*0.8f, gY*0.55f)
                                        .build()
                        )
                                .build()
                );
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox3")
                                        .position(x*0.5f, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l24t3))
                                        .withArrow(gX*0.45f, gY*0.97f)
                                        .build()
                        )
                                .build()
                );
                break;

            case 25:
                // L25T1
                Level.levelObject.tutorials.add(
                        new Tutorial.TutorialBuilder(
                                new TextBoxBuilder("textBox1")
                                        .position(x, y)
                                        .width(width)
                                        .size(size)
                                        .text(Utils.getStringResource( R.string.l25t1))
                                        .build()
                        )
                                .build()
                );
                break;


        }
    }
}













    public void show(int soundId) {
        Sound.play(soundId, 1f, 1f, 0);
        isBlocked = true;
        textBox.alpha = 0f;

        if (onShowBeforeAnim != null) {
            onShowBeforeAnim.onShowBeforeAnim();
        }
            textBox.display();

            Animation anim = Utils.createSimpleAnimation(textBox, "textBoxTranslateX1", "translateX", 300, -Game.resolutionX *2, 0f);
            final Tutorial self = this;
            anim.setAnimationListener(new Animation.AnimationListener() {
                @Override
                public void onAnimationEnd() {
                    self.isBlocked = false;
                    if (self.onShowAfterAnim != null) {
                        self.onShowAfterAnim.onShowAfterAnim();
                    }
                }
            });
            anim.start();

        Utils.createSimpleAnimation(textBox, "alpha", "alpha", 300, 0f, 1f).start();
    }

    public void unshow(){

        //Log.e("tutorial", "unshow tutorial "+textBox.name);

        isBlocked = true;
        textBox.arrowContinuar.isBlocked = true;

        if (onUnshowBeforeAnim != null)
            onUnshowBeforeAnim.onUnshowBeforeAnim();

        final Tutorial self = this;
        Animation anim = Utils.createSimpleAnimation(this.textBox, "alpha", "alpha", 500, 1f, 0f, new Animation.AnimationListener() {
            @Override
            public void onAnimationEnd() {
                Log.e("tutorial", "onAnimationEnd alphaUnshow ");
                self.textBox.clearDisplay();
                if (self.onUnshowAfterAnim != null){
                    self.isBlocked = true;
                    self.onUnshowAfterAnim.onUnshowAfterAnim();
                }
                if (self.onUnshowAfterAnim2 != null){
                    self.onUnshowAfterAnim2.onUnshowAfterAnim2();
                }
            }
        });
        anim.start();
    }

    public interface OnShowBeforeAnim{
        void onShowBeforeAnim();
    }

    public interface OnShowAfterAnim{
        void onShowAfterAnim();
    }

    public interface OnUnshowBeforeAnim{
        void onUnshowBeforeAnim();
    }


    public interface OnUnshowAfterAnim2{
        void onUnshowAfterAnim2();
    }

    public interface OnUnshowAfterAnim{
        void onUnshowAfterAnim();
    }


    public void setOnShowBeforeAnim(OnShowBeforeAnim v) {
        this.onShowBeforeAnim = v;
    }

    public void setOnShowAfterAnim(OnShowAfterAnim v) {
        this.onShowAfterAnim = v;
    }

    public void setOnUnshowBeforeAnim(OnUnshowBeforeAnim v) {
        this.onUnshowBeforeAnim = v;
    }

    public void setOnUnshowAfterAnim(OnUnshowAfterAnim v) {
        this.onUnshowAfterAnim = v;
    }

    public void setOnUnshowAfterAnim2(OnUnshowAfterAnim2 v) {
        this.onUnshowAfterAnim2 = v;
    }

    public static class TutorialBuilder {

        private final TextBox textBox;
        private OnShowBeforeAnim onShowBeforeAnim;
        private OnShowAfterAnim onShowAfterAnim;
        private OnUnshowBeforeAnim onUnshowBeforeAnim;
        private OnUnshowAfterAnim onUnshowAfterAnim;

        public TutorialBuilder(TextBox textBox) {
            this.textBox = textBox;
        }

        public TutorialBuilder onShowBeforeAnim(OnShowBeforeAnim onShowBeforeAnim){
            this.onShowBeforeAnim = onShowBeforeAnim;
            return this;
        }

        public TutorialBuilder onShowAfterAnim(OnShowAfterAnim onShowAfterAnim){
            this.onShowAfterAnim = onShowAfterAnim;
            return this;
        }

        public TutorialBuilder onUnshowBeforeAnim(OnUnshowBeforeAnim onUnshowBeforeAnim){
            this.onUnshowBeforeAnim = onUnshowBeforeAnim;
            return this;
        }

        public TutorialBuilder onUnshowAfterAnim(OnUnshowAfterAnim onUnshowAfterAnim){
            this.onUnshowAfterAnim = onUnshowAfterAnim;
            return this;
        }

        public Tutorial build(){
            return new Tutorial(this);
        }
    }




        /*
        // prepara os valores para o seletor de nível
        String [] levels = new String [Levels.maxNumberOfLevels-1];
        for (int i = 0; i < Levels.maxNumberOfLevels-1; i++){
            levels[i] = Integer.toString(i+1);
        }

        // cria o seletor de nível
        selectorLevel = new Selector("selectorLevel", 0f,0f, fontSize, "", levels, font);
        selectorLevel.setSelectedValue(SaveGame.saveGame.currentLevelNumber - 1);

        // adiciona a opção de selecionar nível
        menuMain.addMenuOption("SelecionarNivel", getContext().getResources().getString(R.string.menuPrincipalAlterarNivel), new MenuOption.OnChoice() {
            @Override
            public void onChoice() {
                selectorLevel.setSelectedValue(SaveGame.saveGame.currentLevelNumber - 1);
                Game.selectorLevel.fromMenu(innerMenu);
            }
        });

        // ajusta a posição do seletor de nível
        MenuOption menuOptionSelectLevel = menuMain.getMenuOptionByName("SelecionarNivel");
        selectorLevel.setPosition(menuOptionSelectLevel.x + (menuOptionSelectLevel.width), menuOptionSelectLevel.y);
        selectorLevel.setOnChange(new Selector.OnChange() {
            @Override
            public void onChange() {
                Game.changeLevel(Game.selectorLevel.selectedValue+1);
            }
        });

        */


        /*

        // cria o seletor de dificuldade
        selectorDificulty = new Selector("selectorDificulty", 0f,0f, fontSize, "",
                new String[]{getContext().getResources().getString(R.string.facil),
                        getContext().getResources().getString(R.string.normal),
                        getContext().getResources().getString(R.string.dificil),
                        getContext().getResources().getString(R.string.insano)
                }, font);
        menuOptions.addMenuOption("dificuldade", getContext().getResources().getString(R.string.dificuldade), new MenuOption.OnChoice() {
            @Override
            public void onChoice() {
                Game.selectorDificulty.fromMenu(Game.menuOptions);
                if (SaveGame.saveGame.currentDifficulty == DIFFICULTY_EASY){
                    selectorDificulty.setSelectedValue(0);
                    setBottomText(getContext().getResources().getString(R.string.mensagemDificuldadeFacil));
                } else if (SaveGame.saveGame.currentDifficulty == DIFFICULTY_NORMAL){
                    selectorDificulty.setSelectedValue(1);
                    setBottomText(getContext().getResources().getString(R.string.mensagemDificuldadeNormal));
                } else if (SaveGame.saveGame.currentDifficulty == DIFFICULTY_HARD){
                    selectorDificulty.setSelectedValue(2);
                    setBottomText(getContext().getResources().getString(R.string.mensagemDificuldadeDificil));
                } else if (SaveGame.saveGame.currentDifficulty == DIFFICULTY_INSANE){
                    selectorDificulty.setSelectedValue(3);
                    setBottomText(getContext().getResources().getString(R.string.mensagemDificuldadeInsano));
                }
            }
        });

        final MenuOption menuOptionDificuldade = menuOptions.getMenuOptionByName("dificuldade");
        selectorDificulty.setPosition(menuOptionDificuldade.x + (menuOptionDificuldade.width * 1.2f), menuOptionDificuldade.y);

        selectorDificulty.setOnChange(new Selector.OnChange() {
            @Override
            public void onChange() {
                Game.changeDifficulty(selectorDificulty.selectedValue);
                if (selectorDificulty.selectedValue == 0){
                    setBottomText(getContext().getResources().getString(R.string.mensagemDificuldadeFacil));
                } else if (selectorDificulty.selectedValue == 1){
                    setBottomText(getContext().getResources().getString(R.string.mensagemDificuldadeNormal));
                } else if (selectorDificulty.selectedValue == 2){
                    setBottomText(getContext().getResources().getString(R.string.mensagemDificuldadeDificil));
                } else if (selectorDificulty.selectedValue == 3){
                    setBottomText(getContext().getResources().getString(R.string.mensagemDificuldadeInsano));
                }
            }
        });

        selectorDificulty.setOnConclude(new Selector.OnConclude() {
            @Override
            public void onConclude() {
                setBottomText("");
            }
        });

        */



// BOTÃO SOM
        Game.buttonSound = new ButtonOnOff("buttonSound", Game.gameAreaResolutionX * 0.34f,
                Game.resolutionY * 0.89f, Game.resolutionY * 0.06f, Game.resolutionY * 0.06f, Texture.TEXTURE_BUTTONS_AND_BALLS, 1.2f);
        Game.buttonSound.textureMapUnpressed = 9;
        Game.buttonSound.textureMapPressed = 10;
        Game.buttonSound.getListener().x = Game.gameAreaResolutionX * 0.32f;
        Game.buttonSound.getListener().y = Game.resolutionY * 0.86f;
        Game.buttonSound.getListener().width = Game.gameAreaResolutionX * 0.12f;
        Game.buttonSound.getListener().height = Game.resolutionY * 0.12f;

        Game.buttonSound.alpha = 0.5f;
        if (SaveGame.saveGame.sound) {
            Game.buttonSound.setOn();
        } else {
            Game.buttonSound.setOff();
        }

        Game.buttonSound.setOnOffBehavior(new ButtonOnOff.OnOffBehavior() {
            @Override
            public void onBehavior() {
                SaveGame.saveGame.sound = true;
            }

            @Override
            public void offBehavior() {
                SaveGame.saveGame.sound = false;
            }
        });

        // BOTÃO MUSICA
        Game.buttonMusic = new ButtonOnOff("buttonMusic",Game.gameAreaResolutionX * 0.61f,
                Game.resolutionY * 0.89f, Game.resolutionY * 0.06f, Game.resolutionY * 0.06f, Texture.TEXTURE_BUTTONS_AND_BALLS, 1.2f);
        Game.buttonMusic.textureMapUnpressed = 2;
        Game.buttonMusic.textureMapPressed = 1;
        Game.buttonMusic.alpha = 0.5f;
        Game.buttonMusic.getListener().x = Game.gameAreaResolutionX * 0.58f;
        Game.buttonMusic.getListener().y = Game.resolutionY * 0.86f;
        Game.buttonMusic.getListener().width = Game.gameAreaResolutionX * 0.12f;
        Game.buttonMusic.getListener().height = Game.resolutionY * 0.12f;
        if (SaveGame.saveGame.music) {
            Game.buttonMusic.setOn();
        } else {
            Game.buttonMusic.setOff();
        }

        Game.buttonMusic.setOnOffBehavior(new ButtonOnOff.OnOffBehavior() {
            @Override
            public void onBehavior() {
                SaveGame.saveGame.music = true;
                if (Sound.music != null){
                    Sound.music.setVolume(0.006f* (float) 50, 0.006f* (float) 50);
                    Sound.music.start();
                }
            }

            @Override
            public void offBehavior() {
                SaveGame.saveGame.music = false;
                if (Sound.music != null){
                    Sound.music.pause();
                }
            }
        });



---------------------
package com.marcelslum.ultnogame;



import android.app.Activity;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.opengl.GLSurfaceView;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import com.google.android.gms.ads.AdListener;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.InterstitialAd;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.games.Games;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;

public class MainActivity extends FragmentActivity implements
        OnConnectionFailedListener {


    private static final int REQUEST_ACHIEVEMENTS = 2001;
    private static final int REQUEST_LEADERBOARD = 3001;

    private GLSurfaceView glSurfaceView;

    private InterstitialAd interstitial;

	public GoogleApiClient mGoogleApiClient;

    private static int RC_SIGN_IN = 9001;
    private boolean mResolvingConnectionFailure = false;
    private boolean mAutoStartSignInflow = true;
    private boolean mSignInClicked = false;

    public boolean connected = false;

    private static String STATE_RESOLVING_ERROR = "re";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Game.mainActivity = this;
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        initAds();
        mResolvingConnectionFailure = savedInstanceState != null && savedInstanceState.getBoolean(STATE_RESOLVING_ERROR, false);



        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .enableAutoManage(this /* FragmentActivity */,
                        this /* OnConnectionFailedListener */)
                //.addConnectionCallbacks(this)
                //.addOnConnectionFailedListener(this)
                .addApi(Games.API).addScope(Games.SCOPE_GAMES)
                .build();

        mGoogleApiClient.connect();


        // Fullscreen mode
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        getWindow().getDecorView().setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {
            @Override
            public void onSystemUiVisibilityChange(int visibility) {
                if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
                    // TODO: The system bars are visible. Make any desired
                    if (Game.gameState == Game.GAME_STATE_JOGAR) {
                        Game.setGameState(Game.GAME_STATE_PAUSE);
                    }
                } else {
                    // TODO: The system bars are NOT visible. Make any desired
                }
            }
        });
        glSurfaceView = new GLSurf(this);
        glSurfaceView.setPreserveEGLContextOnPause(true);
        setContentView(R.layout.activity_main);
        RelativeLayout layout = (RelativeLayout) findViewById(R.id.gamelayout);
        RelativeLayout.LayoutParams glParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
        layout.addView(glSurfaceView, glParams);

    }

	@Override
	protected void onSaveInstanceState(Bundle outState) {
	    super.onSaveInstanceState(outState);
	    outState.putBoolean(STATE_RESOLVING_ERROR, mResolvingConnectionFailure);
	}

    @Override
    public void onConnected(Bundle connectionHint) {
        Log.e("mainActivity", "onConnected(Bundle connectionHint)");
        ConnectionHandler.mGoogleApiClientConected = true;
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {
        if (mResolvingConnectionFailure) {
            return;
        }

        if (mSignInClicked || mAutoStartSignInflow) {
            mAutoStartSignInflow = false;
            mSignInClicked = false;
            mResolvingConnectionFailure = true;

            // Attempt to resolve the connection failure using BaseGameUtils.
            // The R.string.signin_other_error value should reference a generic
            // error string in your strings.xml file, such as "There was
            // an issue with sign-in, please try again later."

            if (!BaseGameUtils2.resolveConnectionFailure(this,
                    mGoogleApiClient, connectionResult,
                    RC_SIGN_IN, getResources().getString(R.string.signin_other_error))) {
                mResolvingConnectionFailure = false;
            }
        }
        Splash.setSplashMessage(Splash.AGUARDA_MESSAGE_GOOGLE_NAO_CONECTADO);
    }

    @Override
    public void onConnectionSuspended(int i) {
        mGoogleApiClient.connect();
    }

    protected void onActivityResult(int requestCode, int resultCode,
                                    Intent intent) {

        Log.e("main activity", "onActivityResult " + resultCode);
        if (requestCode == RC_SIGN_IN) {
            mSignInClicked = false;
            mResolvingConnectionFailure = false;
            if (resultCode == RESULT_OK) {
                mGoogleApiClient.connect();
            } else {
                // Bring up an error dialog to alert the user that sign-in
                // failed. The R.string.signin_failure should reference an error
                // string in your strings.xml file that tells the user they
                // could not be signed in, such as "Unable to sign in."
                BaseGameUtils2.showActivityResultError(this,
                        requestCode, resultCode, R.string.signin_failure);
            }
        }
    }

	private void initAds(){
		interstitial = new InterstitialAd(MainActivity.this);
		interstitial.setAdUnitId("ca-app-pub-2413920269734587/2998542956");

		AdRequest adRequest = new AdRequest.Builder()
		    .addTestDevice(AdRequest.DEVICE_ID_EMULATOR)
		    .addTestDevice("9BDF327E8C4CD72B8C5DC02B20DD551B")
            .addTestDevice("AB221C24C4F00E7425323CFD691D8964")
		    .build();
		interstitial.loadAd(adRequest);
		interstitial.setAdListener(new AdListener() {
		    @Override
		    public void onAdLoaded() {
			}

		    @Override
		    public void onAdClosed() {
			    if (Game.gameState != Game.GAME_STATE_INTRO){
                    Log.e("GLRenderer", "setGameState MENU");
                    Game.setGameState(Game.GAME_STATE_MENU);
                }
		    }

		    @Override
		    public void onAdFailedToLoad(int errorCode) {
			    //Game.setGameState(Game.GAME_STATE_MENU);
		    }

		    @Override
		    public void onAdLeftApplication() {
		    }

		    @Override
		    public void onAdOpened() {
		    }
		});
		interstitial.loadAd(adRequest);

	}

	private void setFullScreen() {
		int uiOptions = this.getWindow().getDecorView().getSystemUiVisibility();
		if (Build.VERSION.SDK_INT >= 14) {
		    uiOptions ^= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;
		}
		if (Build.VERSION.SDK_INT >= 16) {
		    uiOptions ^= View.SYSTEM_UI_FLAG_FULLSCREEN;
		}
		if (Build.VERSION.SDK_INT >= 18) {
		    uiOptions ^= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
		}

		this.getWindow().getDecorView().setSystemUiVisibility(uiOptions);
	}

    @Override
    protected void onStart() {
        super.onStart();
        mGoogleApiClient.connect();
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (mGoogleApiClient.isConnected()) {
            mGoogleApiClient.disconnect();
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        glSurfaceView.onPause();
    }

    @Override
    public void onBackPressed() {
        if (Game.gameState == Game.GAME_STATE_JOGAR) {
            Game.setGameState(Game.GAME_STATE_PAUSE);
        } else if (Game.gameState == Game.GAME_STATE_MENU) {
            super.onPause();
            glSurfaceView.onPause();
            moveTaskToBack(true);
        } else {
            Game.setGameState(Game.GAME_STATE_MENU);
        }
    }

    public void showInterstitial() {
        runOnUiThread(new Runnable() {
            public void run() {
                if (interstitial.isLoaded()) {
                    interstitial.show();
                } else {
                    //Log.d(TAG, "Interstitial ad is not loaded yet");
                }
            }
        });
    }

    @Override
    protected void onResume() {
        super.onResume();
        setFullScreen();
        glSurfaceView.onResume();
    }

    public void unlockAchievement() {
        if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
            Games.Achievements.unlock(mGoogleApiClient, "CgkIjNyO58cTEAIQAQ");
        } else {
            // Alternative implementation (or warn user that they must sign in to use this feature)
        }
    }

    public void showAchievements(){
        if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
            // Call a Play Games services API method, for example:
            Games.Achievements.unlock(mGoogleApiClient, "CgkIjNyO58cTEAIQAQ");

            Intent intent = Games.Achievements.getAchievementsIntent(mGoogleApiClient);

            startActivityForResult(intent,
                    REQUEST_ACHIEVEMENTS);
        } else {
            // Alternative implementation (or warn user that they must
            // sign in to use this feature)
        }
    }

    public void showLeaderboards(){
        if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
            startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                    "CgkIjNyO58cTEAIQAg"), REQUEST_LEADERBOARD);
        } else {
            Log.e("mainActivity", "não conectado");
        }
    }

    public void submitScore() {
        if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
            Games.Leaderboards.submitScore(mGoogleApiClient, "CgkIjNyO58cTEAIQAg", 12333);
        } else {
            Log.e("mainActivity", "não conectado");

            // Alternative implementation (or warn user that they must sign in to use this feature)
        }
    }

    public void connectMGoogleApiClient() {
        Log.e("mainActivity", "mGoogleApiClient.connect();");
        mGoogleApiClient.connect();
    }
}













 Target(String name, Game game, float x, float y, float width, float height, int weight, int [] states, int currentState, int special, boolean ghost){
        super(name, game, x, y, width, height, weight, new Color(0,0,0,1));
        this.states = states;
        this.currentState = currentState;
        this.special = special;
        setType();
        textureId = Game.TEXTURE_TARGETS;
        program = this.game.imageProgram;
        isMovable = false;
        isGhost = ghost;

        this.setDrawInfo();

        ArrayList<float[]> valuesAnimationShowPoints = new ArrayList<>();
        valuesAnimationShowPoints.add(new float[]{0f,1f});
        valuesAnimationShowPoints.add(new float[]{1f,0f});
        showPointsStateAnim = new Animation(this, "showPointsState", "showPointsState", 1000, valuesAnimationShowPoints, false, false);

        ArrayList<float[]> valuesAnimationShowPointsAlpha = new ArrayList<>();
        valuesAnimationShowPointsAlpha.add(new float[]{0f,1f});
        valuesAnimationShowPointsAlpha.add(new float[]{1f,0f});
        showPointsAlphaAnim = new Animation(this, "pointsAlpha", "pointsAlpha", 1000, valuesAnimationShowPointsAlpha, false, true);

        ArrayList<float[]> valuesAnimationGhostAlpha = new ArrayList<>();
        valuesAnimationGhostAlpha.add(new float[]{0f,1f});
        valuesAnimationGhostAlpha.add(new float[]{1f,0f});
        ghostAlphaAnim = new Animation(this, "ghostAlpha", "ghostAlpha", 1000, valuesAnimationGhostAlpha, false, true);

        ArrayList<float[]> valuesAnimation = new ArrayList<>();
        valuesAnimation.add(new float[]{0f,1f});
        valuesAnimation.add(new float[]{0.3f,0.10f});
        valuesAnimation.add(new float[]{0.4f,0f});
        valuesAnimation.add(new float[]{1f,0f});
        desapearAnim = new Animation(this, "desapear", "alpha", 1000, valuesAnimation, false, true);
        final Target self = this;
        desapearAnim .setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationEnd() {
                self.isVisible = false;
            }
        });
    }

 public void UpdateSprite()
    {
        // Get new transformed vertices
        //vertices = sprite.getTransformedVertices();

        // The vertex buffer.
        ByteBuffer bb = ByteBuffer.allocateDirect(vertices.length * 4);
        bb.order(ByteOrder.nativeOrder());
        vertexBuffer = bb.asFloatBuffer();
        vertexBuffer.put(vertices);
        vertexBuffer.position(0);
    }

 class Sprite
    {
        float angle;
        float scale;
        RectF base;
        PointF translation;

        public Sprite()
        {
            // Initialise our intital size around the 0,0 point
            base = new RectF(-50f*ssu,50f*ssu, 50f*ssu, -50f*ssu);

            // Initial translation
            translation = new PointF(50f*ssu,50f*ssu);

            // We start with our inital size
            scale = 1f;

            // We start in our inital angle
            angle = 0f;
        }


        public void translate(float deltax, float deltay)
        {
            // Update our location.
            translation.x += deltax;
            translation.y += deltay;
        }

        public void scale(float deltas)
        {
            scale += deltas;
        }

        public void rotate(float deltaa)
        {
            angle += deltaa;
        }

        public float[] getTransformedVertices()
        {
            // Start with scaling
            float x1 = base.left * scale;
            float x2 = base.right * scale;
            float y1 = base.bottom * scale;
            float y2 = base.top * scale;

            // We now detach from our Rect because when rotating,
            // we need the seperate points, so we do so in opengl order
            PointF one = new PointF(x1, y2);
            PointF two = new PointF(x1, y1);
            PointF three = new PointF(x2, y1);
            PointF four = new PointF(x2, y2);

            // We create the sin and cos function once,
            // so we do not have calculate them each time.
            float s = (float) Math.sin(angle);
            float c = (float) Math.cos(angle);

            // Then we rotate each point
            one.x = x1 * c - y2 * s;
            one.y = x1 * s + y2 * c;
            two.x = x1 * c - y1 * s;
            two.y = x1 * s + y1 * c;
            three.x = x2 * c - y1 * s;
            three.y = x2 * s + y1 * c;
            four.x = x2 * c - y2 * s;
            four.y = x2 * s + y2 * c;

            // Finally we translate the sprite to its correct position.
            one.x += translation.x;
            one.y += translation.y;
            two.x += translation.x;
            two.y += translation.y;
            three.x += translation.x;
            three.y += translation.y;
            four.x += translation.x;
            four.y += translation.y;

            // We now return our float array of vertices.
            return new float[]
                    {
                            one.x, one.y, 0.0f,
                            two.x, two.y, 0.0f,
                            three.x, three.y, 0.0f,
                            four.x, four.y, 0.0f,
                    };
        }
    }

public void SetupTriangle()
{
    // We will need a randomizer
    Random rnd = new Random();

    // We have to create the vertices of our triangle.
    vertices = new float[]
            {       0.0f, 300f, 0.0f,
                    120.0f, 300.0f, 0.0f,
                    120.0f, 340.0f, 0.0f,
                    0.0f, 340, 0.0f,
                    125.0f, 300.0f, 0.0f,
                    245.0f, 300.0f, 0.0f,
                    245.0f, 340.0f, 0.0f,
                    125.0f, 340.0f, 0.0f,
                    250.0f, 300.0f, 0.0f,
                    370.0f, 300.0f, 0.0f,
                    370.0f, 340.0f, 0.0f,
                    250.0f, 340.0f, 0.0f,
            };

    indices = new short[] {0, 1, 2, 0, 2, 3, 0+4, 1+4, 2+4, 0+4, 2+4, 3+4, 0+8, 1+8, 2+8, 0+8, 2+8, 3+8}; // The order of vertexrendering.

    // The vertex buffer.
    ByteBuffer bb = ByteBuffer.allocateDirect(vertices.length * 4);
    bb.order(ByteOrder.nativeOrder());
    vertexBuffer = bb.asFloatBuffer();
    vertexBuffer.put(vertices);
    vertexBuffer.position(0);

    // initialize byte buffer for the draw list
    ByteBuffer dlb = ByteBuffer.allocateDirect(indices.length * 2);
    dlb.order(ByteOrder.nativeOrder());
    drawListBuffer = dlb.asShortBuffer();
    drawListBuffer.put(indices);
    drawListBuffer.position(0);
}

public void SetupTargets(){

    int totalObjects = this.gi.targets.size() + this.gi.balls.size();

    uvs = new float[totalObjects * 8];

    int i;

    for (i = 0; i < this.gi.targets.size(); i++){
        this.gi.targets.get(i).insertUvData(uvs, i*8);
    };

    int offset = i;

    for (i = 0; i < this.gi.balls.size(); i++){
        this.gi.balls.get(i).insertUvData(uvs, (i+offset)*8);
    };

    // The texture buffer
    ByteBuffer bb1 = ByteBuffer.allocateDirect(uvs.length * 4);
    bb1.order(ByteOrder.nativeOrder());
    uvBuffer = bb1.asFloatBuffer();
    uvBuffer.put(uvs);
    uvBuffer.position(0);

    vertices = new float[totalObjects * 12];


    for (i = 0; i < this.gi.targets.size(); i++){
        this.gi.targets.get(i).insertVerticesData(vertices, i*12);
    };

    offset = i;

    for (i = 0; i < this.gi.balls.size(); i++){
        this.gi.balls.get(i).insertVerticesData(vertices, (i+offset)*12);
    };

    indices = new short[totalObjects * 6];

    for (i = 0; i < this.gi.targets.size(); i++) {
        this.gi.targets.get(i).insertIndicesData(indices, i*6, i*4);
    }

    offset = i;

    for (i = 0; i < this.gi.balls.size(); i++){
        this.gi.balls.get(i).insertIndicesData(indices, (i+offset)*6, (i+offset)*4);
    };

    // The vertex buffer.
    ByteBuffer bb2 = ByteBuffer.allocateDirect(vertices.length * 4);
    bb2.order(ByteOrder.nativeOrder());
    vertexBuffer = bb2.asFloatBuffer();
    vertexBuffer.put(vertices);
    vertexBuffer.position(0);

    // initialize byte buffer for the draw list
    ByteBuffer bb3 = ByteBuffer.allocateDirect(indices.length * 2);
    bb3.order(ByteOrder.nativeOrder());
    drawListBuffer = bb3.asShortBuffer();
    drawListBuffer.put(indices);
    drawListBuffer.position(0);
}




 public void SetupImage()
    {
        // Generate Textures, if more needed, alter these numbers.
        int[] texturenames = new int[2];
        GLES20.glGenTextures(2, texturenames, 0);

        // Retrieve our image from resources.
        int id = mContext.getResources().getIdentifier("drawable/texturas3", null, mContext.getPackageName());

        // Temporary create a bitmap
        Bitmap bmp = BitmapFactory.decodeResource(mContext.getResources(), id);

        // Bind texture to texturename
        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texturenames[0]);

        // Set filtering
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);

        // Load the bitmap into the bound texture.
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bmp, 0);

        // We are done using the bitmap so we should recycle it.
        bmp.recycle();

        // Again for the text texture
        id = mContext.getResources().getIdentifier("drawable/font", null, mContext.getPackageName());
        bmp = BitmapFactory.decodeResource(mContext.getResources(), id);
        GLES20.glActiveTexture(GLES20.GL_TEXTURE0 + 1);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texturenames[1]);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bmp, 0);
        bmp.recycle();
    }

 public void SetupText()
    {
        /*
        // Create our text manager
        tm = new TextManager();

        // Tell our text manager to use index 1 of textures loaded
        tm.setTextureID(1);

        // Create our new textobject
        //Text txt = new Text("esta é um teste do texto", 0f, 0f, 100.f);

        // Add it to our manager
        tm.addText(txt);

        // Create our new textobject
        Text txt2 = new Text("ULTNO", 0, 200f, 400.f);

        // Add it to our manager
        tm.addText(txt2);

        Log.e("width of ultno", " "+tm.getWidth(txt2));

        // Prepare the text for rendering
        tm.PrepareDraw();
        */
    }


     private void UpdatePositions(){
 /*
         for (int i = 0; i < this.gi.balls.size(); i++) {

             Ball ball = this.gi.balls.get(i);
             if (ball.bUp) {
                 ball.x += 5;
                 ball.y += 5;
                 if (ball.x > 400) {
                     ball.bUp = false;
                 }
             } else {
                 ball.x -= 5;
                 ball.y -= 5;
                 if (ball.x < 100) {
                     ball.bUp = true;
                 }
             }
         }



         int totalObjects = this.gi.targets.size() + this.gi.balls.size();

         vertices = new float[totalObjects * 12];

         int i;

         for (i = 0; i < this.gi.targets.size(); i++){
             this.gi.targets.get(i).insertVerticesData(vertices, i*12);
         };

         int offset = i;

         for (i = 0; i < this.gi.balls.size(); i++){
             this.gi.balls.get(i).insertVerticesData(vertices, (i+offset)*12);
         };

         ByteBuffer bb = ByteBuffer.allocateDirect(vertices.length * 4);
         bb.order(ByteOrder.nativeOrder());
         vertexBuffer = bb.asFloatBuffer();
         vertexBuffer.put(vertices);
         vertexBuffer.position(0);

         */
     }

         public void SetupEntities(){

             //this.gi.targets.clear();

             //this.gi.addTarget(new Target("target", this.gi, 0.0f, 400.0f, 480.0f, 30.0f, 10));
             //this.gi.addTarget(new Target("target", this.gi, 0.0f, 400.0f, effectiveScreenWidth, 30.0f, 10));
             //this.gi.addTarget(new Target("target", this.gi, 0.0f, 300.0f, effectiveScreenWidth-10, 30.0f, 10));

             //this.gi.addTarget(new Target("target", this.gi, 0.0f, 0.0f, 10f, effectiveScreenHeight-10, 10));
             /*
             //Log.e("tag setup entities1", " ");



             this.gi.addBall(new Ball("ball", this.gi, 100f, 100f, 10f, 8));
             this.gi.balls.get(0).program = this.imageProgram;
             this.gi.balls.get(0).textureId = 0;
             this.gi.balls.get(0).vx = 12.1f;
             this.gi.balls.get(0).vy = 12.1f;



             this.gi.addBall(new Ball("ball", this.gi, 200f, 200f, 16f, 8));
             this.gi.balls.get(1).program = this.imageProgram;
             this.gi.balls.get(1).textureId = 0;

             this.gi.balls.get(1).vx = 18.1f;
             this.gi.balls.get(1).vy = 18.1f;

             this.gi.addBall(new Ball("ball", this.gi, 300f, 300f, 5f, 8));
             this.gi.balls.get(2).program = this.imageProgram;
             this.gi.balls.get(2).textureId = 0;

             this.gi.balls.get(2).vx = 7.1f;
             this.gi.balls.get(2).vy = 7.1f;

             this.gi.addBall(new Ball("ball", this.gi, 250f, 110f, 13f, 8));
             this.gi.balls.get(3).program = this.imageProgram;
             this.gi.balls.get(3).textureId = 0;
             this.gi.balls.get(3).vx = 6.1f;
             this.gi.balls.get(3).vy = 6.1f;

             this.gi.addBall(new Ball("ball", this.gi, 250f, 190f, 5f, 8));
             this.gi.balls.get(4).program = this.imageProgram;
             this.gi.balls.get(4).textureId = 0;
             this.gi.balls.get(4).vx = 8.1f;
             this.gi.balls.get(4).vy = 8.1f;

             this.gi.addBall(new Ball("ball", this.gi, 250f, 310f, 15f, 8));
             this.gi.balls.get(5).program = this.imageProgram;
             this.gi.balls.get(5).textureId = 0;
             this.gi.balls.get(5).vx = 2.1f;
             this.gi.balls.get(5).vy = 2.1f;
             //Log.e("tag setup entities2", " ");





             //Log.e("tag setup entities3", " ");





             this.gi.bordaE = new Rectangle("bordaE", this.gi, -999, -this.gi.gameAreaResolutionY, 1000, this.gi.gameAreaResolutionY*3, 10, new Color(0,0,0,1));
             this.gi.bordaE.isMovable = false;
             this.gi.bordaE.program = this.solidProgram;

             this.gi.bordaD = new Rectangle("bordaD", this.gi, this.gi.gameAreaResolutionX-2, -this.gi.gameAreaResolutionY, 1000, this.gi.gameAreaResolutionY*3, 10, new Color(0,0,0,1));
             this.gi.bordaD.isMovable = false;
             this.gi.bordaD.program = this.solidProgram;

             this.gi.bordaC = new Rectangle("bordaC", this.gi, 1, -1000, this.gi.gameAreaResolutionX-4, 1001, 10, new Color(1,0,0,1));
             this.gi.bordaC.isMovable = false;
             this.gi.bordaC.program = this.solidProgram;

             this.gi.bordaB = new Rectangle("bordaB", this.gi, 1, this.gi.gameAreaResolutionY-2, this.gi.gameAreaResolutionX, 2, 10, new Color(0,0,0,1));
             this.gi.bordaB.isMovable = false;
             this.gi.bordaB.program = this.solidProgram;

             this.gi.quad = new Quadtree(new RectangleM(0,0,this.gi.gameAreaResolutionX,this.gi.gameAreaResolutionY),5,5);

             this.gi.addTarget(new Target("target", this.gi, 1.0f, 1.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 102.0f, 1.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 204.0f, 1.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 308.0f, 1.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 410.0f, 1.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 1.0f, 24.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 102.0f, 24.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 204.0f, 24.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 308.0f, 24.0f, 100.0f, 20.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 410.0f, 24.0f, 100.0f, 20.0f, 10));


             for (int i = 0; i < this.gi.targets.size(); i++){
                 this.gi.targets.get(i).textureId = 2;
                 this.gi.targets.get(i).program = imageProgram;
             }
     */



             //SetupTargets();

             // Create the image information
             //SetupImage();
             // Create our texts
             //SetupText();

             /*

             this.gi.addTarget(new Target("target", this.gi, 100.0f, 300.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 202.0f, 300.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 304.0f, 300.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 406.0f, 300.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 508.0f, 300.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 100.0f, 335.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 202.0f, 335.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 304.0f, 335.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 406.0f, 335.0f, 100.0f, 30.0f, 10));
             this.gi.addTarget(new Target("target", this.gi, 508.0f, 335.0f, 100.0f, 30.0f, 10));

             for (int i = 0; i < 50; i++) {
                 this.gi.addBall((new Ball("ball", this.gi, 100.0f + (i*1), 100.0f, 10.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 150.0f + (i*1), 100.0f, 20.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 200.0f, 100.0f + (i*1), 10.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 250.0f, 100.0f + (i*1), 20.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 300.0f, 100.0f + (i*1), 10.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 350.0f + (i*1), 100.0f, 20.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 400.0f + (i*1), 100.0f, 10.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 450.0f + (i*1), 100.0f, 20.0f, 10)));

                 this.gi.addBall((new Ball("ball", this.gi, 100.0f + (i*1), 200.0f, 10.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 150.0f + (i*1), 200.0f, 20.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 200.0f + (i*1), 200.0f, 20.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 250.0f, 200.0f + (i*1), 10.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 300.0f + (i*1), 200.0f, 20.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 350.0f + (i*1), 200.0f, 10.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 400.0f + (i*1), 200.0f, 20.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 450.0f + (i*1), 200.0f, 20.0f, 10)));

                 this.gi.addBall((new Ball("ball", this.gi, 100.0f, 300.0f + (i*1), 1.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 150.0f + (i*1), 300.0f, 2.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 200.0f, 300.0f + (i*1), 2.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 250.0f + (i*1), 300.0f, 1.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 300.0f + (i*1), 300.0f, 2.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 350.0f + (i*1), 300.0f, 1.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 400.0f + (i*1), 300.0f, 2.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 450.0f + (i*1), 300.0f, 2.0f, 10)));

                 this.gi.addBall((new Ball("ball", this.gi, 100.0f - (i*1), 150.0f, 1.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 170.0f + (i*1), 150.0f, 2.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 200.0f - (i*1), 150.0f, 2.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 270.0f - (i*1), 150.0f, 1.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 300.0f - (i*1), 150.0f, 2.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 370.0f + (i*1), 150.0f, 1.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 400.0f - (i*1), 150.0f, 2.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 450.0f + (i*1), 150.0f, 2.0f, 10)));

                 this.gi.addBall((new Ball("ball", this.gi, 120.0f, 450.0f + (i*1), 15.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 150.0f, 450.0f - (i*1), 25.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 220.0f, 450.0f + (i*1), 25.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 250.0f, 450.0f - (i*1), 15.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 320.0f, 450.0f + (i*1), 25.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 350.0f, 450.0f - (i*1), 15.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 420.0f, 450.0f + (i*1), 25.0f, 10)));
                 this.gi.addBall((new Ball("ball", this.gi, 450.0f, 450.0f - (i*1), 25.0f, 10)));
             }
             */
         }



           private void Render(float[] m) {

                 GLES20.glUseProgram(this.imageProgram.get());

                 GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
                 GLES20.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

                 // get handle to vertex shader's vPosition member and add vertices
                 int mPositionHandle = GLES20.glGetAttribLocation(this.imageProgram.get(), "vPosition");
                 GLES20.glVertexAttribPointer(mPositionHandle, 3, GLES20.GL_FLOAT, false, 0, this.gi.balls.get(0).verticesBuffer);
                 GLES20.glEnableVertexAttribArray(mPositionHandle);

                 // Get handle to texture coordinates location and load the texture uvs
                 int mTexCoordLoc = GLES20.glGetAttribLocation(this.imageProgram.get(), "a_texCoord" );
                 GLES20.glVertexAttribPointer ( mTexCoordLoc, 2, GLES20.GL_FLOAT, false, 0, this.gi.balls.get(0).uvBuffer);
                 GLES20.glEnableVertexAttribArray ( mTexCoordLoc );

                 // Get handle to shape's transformation matrix and add our matrix
                 int mtrxhandle = GLES20.glGetUniformLocation(this.imageProgram.get(), "uMVPMatrix");
                 GLES20.glUniformMatrix4fv(mtrxhandle, 1, false, m, 0);

                 // Get handle to textures locations
                 // Set the sampler texture unit to 0, where we have saved the texture.
                 int mSamplerLoc = GLES20.glGetUniformLocation (this.imageProgram.get(), "s_texture" );
                 GLES20.glUniform1i ( mSamplerLoc, 0);

                 // Draw the triangle
                 GLES20.glDrawElements(GLES20.GL_TRIANGLES, this.gi.balls.get(0).indicesData.length, GLES20.GL_UNSIGNED_SHORT, this.gi.balls.get(0).indicesBuffer);

                 // Disable vertex array
                 GLES20.glDisableVertexAttribArray(mPositionHandle);
                 GLES20.glDisableVertexAttribArray(mTexCoordLoc);

             }


package ultno.marcelslum.ultnogame;


import android.opengl.GLES20;
import android.util.Log;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;
import java.util.Iterator;
import java.util.Vector;

public class TextManager {

    private static final float RI_TEXT_UV_BOX_WIDTH = 0.0625f;
    private static final float RI_TEXT_TEXTURE_SIZE = 512.0f;
    private static final float RI_TEXT_WIDTH = 64.0f;
    private static final float RI_TEXT_SPACESIZE = 20f;

    private FloatBuffer vertexBuffer;
    private FloatBuffer textureBuffer;
    private FloatBuffer colorBuffer;
    private ShortBuffer drawListBuffer;

    private float[] vecs;
    private float[] uvs;
    private short[] indices;
    private float[] colors;

    private int index_vecs;
    private int index_indices;
    private int index_uvs;
    private int index_colors;

    private int texturenr;

    private float uniformscale;

    public static int[] l_size = {
            8, 8,	6,	9,	16,	13,	14,	16,	5,	8,	8,	8,	12,	6,	10,	6,
            13, 14,	8,	13,	14,	14,	13,	13,	13,	14,	14,	6,	6,	9,	12,	9,
            13, 21,	14,	14,	13,	13,	13,	13,	13,	14,	6,	11,	14,	11,	17,	14,
            14, 13,	14,	13,	13,	13,	14,	13,	17,	13,	13,	13,	8,	13,	7,	10,
            14, 6,	14,	13,	14,	14,	14,	10,	14,	13,	6,	5,	13,	6,	17,	14,
            14, 13,	14,	11,	14,	10,	14,	13,	17,	13,	14,	14,	10,	5,	10,	11,
            8, 13,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	11,	21,	8,	8,
            8, 8,	6,	6,	11,	11,	6,	13,	16,	8,	19,	8,	11,	23,	8,	8,
            13, 8,	6,	13,	14,	15,	13,	8,	8,	12,	14,	8,	13,	8,	8,	14,
            8, 9,	12,	8,	8,	6,	13,	13,	8,	8,	8,	8,	13,	8,	8,	8,
            13, 13,	13,	13,	13,	13,	13,	21,	13,	13,	13,	13,	14,	6,	6,	10,
            11, 8,	13,	13,	13,	13,	13,	13,	8,	8,	13,	13,	13,	13,	13,	8,
            8, 13,	13,	13,	13,	13,	13,	23,	13,	13,	13,	13,	13,	6,	6,	8,
            11, 8,	13,	13,	13,	13,	13,	13,	13,	8,	13,	13,	13,	13,	13,	8
    };

    public Vector<Text> txtcollection;

    public TextManager()
    {
        // Create our container
        txtcollection = new Vector<Text>();

        // Create the arrays
        vecs = new float[3 * 10];
        colors = new float[4 * 10];
        uvs = new float[2 * 10];
        indices = new short[10];

        // init as 0 as default
        texturenr = 0;
    }

    public void addText(Text obj)
    {
        // Add text object to our collection
        txtcollection.add(obj);
    }

    public void setTextureID(int val)
    {
        texturenr = val;
    }


    public void AddCharRenderInformation(float[] vec, float[] cs, float[] uv, short[] indi)
    {
        // We need a base value because the object has indices related to
        // that object and not to this collection so basicly we need to
        // translate the indices to align with the vertexlocation in ou
        // vecs array of vectors.
        short base = (short) (index_vecs / 3);

        // We should add the vec, translating the indices to our saved vector
        for(int i=0;i<vec.length;i++)
        {
            vecs[index_vecs] = vec[i];
            index_vecs++;
        }

        // We should add the colors, so we can use the same texture for multiple effects.
        for(int i=0;i<cs.length;i++)
        {
            colors[index_colors] = cs[i];
            index_colors++;
        }

        // We should add the uvs
        for(int i=0;i<uv.length;i++)
        {
            uvs[index_uvs] = uv[i];
            index_uvs++;
        }

        // We handle the indices
        for(int j=0;j<indi.length;j++)
        {
            indices[index_indices] = (short) (base + indi[j]);
            index_indices++;
        }
    }

    public void PrepareDrawInfo()
    {
        // Reset the indices.
        index_vecs = 0;
        index_indices = 0;
        index_uvs = 0;
        index_colors = 0;

        // Get the total amount of characters
        int charcount = 0;
        for (Text txt : txtcollection) {
            if(txt!=null)
            {
                if(!(txt.text==null))
                {
                    charcount += txt.text.length();
                }
            }
        }

        // Create the arrays we need with the correct size.
        vecs = null;
        colors = null;
        uvs = null;
        indices = null;

        vecs = new float[charcount * 12];
        colors = new float[charcount * 16];
        uvs = new float[charcount * 8];
        indices = new short[charcount * 6];

    }

    public void PrepareDraw()
    {
        // Setup all the arrays
        PrepareDrawInfo();

        // Using the iterator protects for problems with concurrency
        for(Iterator<Text> it = txtcollection.iterator(); it.hasNext() ; )
        {
            Text txt = it.next();
            if(txt!=null)
            {
                if(!(txt.text==null))
                {
                    Log.e("size on prepare ", " "+txt.size);
                    convertTextToTriangleInfo(txt);
                }
            }
        }
    }

    public void Draw(float[] m)
    {
        // Set the correct shader for our grid object.
        GLES20.glUseProgram(GraphicTools.sp_Text);

        // The vertex buffer.
        ByteBuffer bb = ByteBuffer.allocateDirect(vecs.length * 4);
        bb.order(ByteOrder.nativeOrder());
        vertexBuffer = bb.asFloatBuffer();
        vertexBuffer.put(vecs);
        vertexBuffer.position(0);

        // The vertex buffer.
        ByteBuffer bb3 = ByteBuffer.allocateDirect(colors.length * 4);
        bb3.order(ByteOrder.nativeOrder());
        colorBuffer = bb3.asFloatBuffer();
        colorBuffer.put(colors);
        colorBuffer.position(0);

        // The texture buffer
        ByteBuffer bb2 = ByteBuffer.allocateDirect(uvs.length * 4);
        bb2.order(ByteOrder.nativeOrder());
        textureBuffer = bb2.asFloatBuffer();
        textureBuffer.put(uvs);
        textureBuffer.position(0);

        // initialize byte buffer for the draw list
        ByteBuffer dlb = ByteBuffer.allocateDirect(indices.length * 2);
        dlb.order(ByteOrder.nativeOrder());
        drawListBuffer = dlb.asShortBuffer();
        drawListBuffer.put(indices);
        drawListBuffer.position(0);

        // get handle to vertex shader's vPosition member
        int mPositionHandle = GLES20.glGetAttribLocation(GraphicTools.sp_Text, "vPosition");

        // Enable a handle to the triangle vertices
        GLES20.glEnableVertexAttribArray(mPositionHandle);

        // Prepare the background coordinate data
        GLES20.glVertexAttribPointer(mPositionHandle, 3,
                GLES20.GL_FLOAT, false,
                0, vertexBuffer);

        int mTexCoordLoc = GLES20.glGetAttribLocation(GraphicTools.sp_Text, "a_texCoord" );

        // Prepare the texturecoordinates
        GLES20.glVertexAttribPointer ( mTexCoordLoc, 2, GLES20.GL_FLOAT,
                false,
                0, textureBuffer);

        GLES20.glEnableVertexAttribArray ( mPositionHandle );
        GLES20.glEnableVertexAttribArray ( mTexCoordLoc );

        int mColorHandle = GLES20.glGetAttribLocation(GraphicTools.sp_Text, "a_Color");

        // Enable a handle to the triangle vertices
        GLES20.glEnableVertexAttribArray(mColorHandle);

        // Prepare the background coordinate data
        GLES20.glVertexAttribPointer(mColorHandle, 4,
                GLES20.GL_FLOAT, false,
                0, colorBuffer);

        // get handle to shape's transformation matrix
        int mtrxhandle = GLES20.glGetUniformLocation(GraphicTools.sp_Text, "uMVPMatrix");

        // Apply the projection and view transformation
        GLES20.glUniformMatrix4fv(mtrxhandle, 1, false, m, 0);

        int mSamplerLoc = GLES20.glGetUniformLocation (GraphicTools.sp_Text, "s_texture" );

        // Set the sampler texture unit to our selected id
        GLES20.glUniform1i ( mSamplerLoc, texturenr);

        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_NEAREST);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);

        // Draw the triangle
        GLES20.glDrawElements(GLES20.GL_TRIANGLES, indices.length, GLES20.GL_UNSIGNED_SHORT, drawListBuffer);

        // Disable vertex array
        GLES20.glDisableVertexAttribArray(mPositionHandle);
        GLES20.glDisableVertexAttribArray(mTexCoordLoc);
        GLES20.glDisableVertexAttribArray(mColorHandle);

    }



    public float getWidth(Text val){
        float initialX = 0;
        String text = val.text;
        float size = val.size;

        for(int j=0; j<text.length(); j++) {
            // get ascii value
            char c = text.charAt(j);
            int c_val = (int) c;
            int indx = convertCharToIndex(c_val);

            if (indx == -1) {
                // unknown character, we will add a space for it to be save.
                initialX += (size / 2);
                continue;
            }

            initialX += ((l_size[indx]) * (size / (RI_TEXT_TEXTURE_SIZE * RI_TEXT_UV_BOX_WIDTH)));
        }
        return initialX;
    }

    public int convertCharToIndex(int c_val)
    {
        int indx = -1;

        // Retrieve the index
        if(c_val>64&&c_val<91) // A-Z
            indx = c_val - 31;
        else if(c_val>96&&c_val<123) // a-z
            indx = c_val - 31;
        else if(c_val>47&&c_val<58) // 0-9
            indx = c_val - 32;
        else if(c_val==43) // +
            indx = 12;
        else if(c_val==45) // -
            indx = 14;
        else if(c_val==33) // !
            indx = 2;
        else if(c_val==63) // ?
            indx = 32;
        else if(c_val==61) // =
            indx = 30;
        else if(c_val==58) // :
            indx = 27;
        else if(c_val==46) // .
            indx = 15;
        else if(c_val==44) // ,
            indx = 43;
        else if(c_val==42) // *
            indx = 44;
        else if(c_val==36) // $
            indx = 45;
        else if(c_val==36) // ,???????????
            indx = 13;
        else if(c_val==36) // ã
            indx = 13;
        else if(c_val==233) //é
            indx = 201;
        else if(c_val==36) // á
            indx = 13;
        else if(c_val==36) // à
            indx = 13;
        else if(c_val==36) // ,???????????
            indx = 13;
        else if(c_val==36) // ,???????????
            indx = 13;
        else if(c_val==36) // ,???????????
            indx = 13;

        return indx;
    }

    private void convertTextToTriangleInfo(Text val)
    {


        // Get attributes from text object
        float x = val.x;
        float y = val.y;
        String text = val.text;
        float size = val.size;

        Log.e("size ", " "+size);

        // Create
        for(int j=0; j<text.length(); j++)
        {
            // get ascii value
            char c = text.charAt(j);
            Log.e("char ", " "+ c);

            int c_val = (int)c;

            Log.e("char int", " "+ c_val);

            int indx = convertCharToIndex(c_val);

            Log.e("char indx", " "+ indx);

            if(indx==-1) {
                // unknown character, we will add a space for it to be save.
                x += (size/2);
                continue;
            }

            // Calculate the uv parts
            int row = indx / 16;
            int col = indx % 16;

            float v = row * RI_TEXT_UV_BOX_WIDTH;
            float v2 = v + RI_TEXT_UV_BOX_WIDTH;
            float u = col * RI_TEXT_UV_BOX_WIDTH;
            float u2 = u + RI_TEXT_UV_BOX_WIDTH;

            // Creating the triangle information
            float[] vec = new float[12];
            float[] uv = new float[8];
            float[] colors = new float[16];

            vec[0] = x;
            vec[1] = y + size;
            vec[2] = 0.95f;
            vec[3] = x;
            vec[4] = y;
            vec[5] = 0.95f;
            vec[6] = x + size;
            vec[7] = y;
            vec[8] = 0.95f;
            vec[9] = x + size;
            vec[10] = y + size;
            vec[11] = 0.95f;

            colors = new float[]
                    {val.colorData2[0], val.colorData2[1], val.colorData2[2], val.colorData2[3],
                            val.colorData2[0], val.colorData2[1], val.colorData2[2], val.colorData2[3],
                            val.colorData2[0], val.colorData2[1], val.colorData2[2], val.colorData2[3],
                            val.colorData2[0], val.colorData2[1], val.colorData2[2], val.colorData2[3]
                    };
            // 0.001f = texture bleeding hack/fix
            uv[0] = u+0.001f;
            uv[1] = v+0.001f;
            uv[2] = u+0.001f;
            uv[3] = v2-0.001f;
            uv[4] = u2-0.001f;
            uv[5] = v2-0.001f;
            uv[6] = u2-0.001f;
            uv[7] = v+0.001f;

            short[] inds = {0, 1, 2, 0, 2, 3};

            // Add our triangle information to our collection for 1 render call.
            AddCharRenderInformation(vec, colors, uv, inds);

            // Calculate the new position



            x += ((l_size[indx])*(size/(RI_TEXT_TEXTURE_SIZE*RI_TEXT_UV_BOX_WIDTH)));
        }
    }

}


 public void loadLevel(int levelNumber){
        switch (levelNumber){
            case 1:
                levelObject = new Level(levelNumber, this);
                levelObject.ballsQuantity = 1;
                levelObject.minBallsNotInvencibleAlive = 1;
                levelObject.ballsRadiusByResolution = new float[]{0.010f, 0.010f};
                levelObject.ballsInitialXByResolution = new float[]{0.3f, 0.5f};
                levelObject.ballsInitialYByResolution = new float[]{0.5f, 0.5f};
                levelObject.ballsDesiredVelocityXByResolution = new float[]{0.003f, 0.003f};
                levelObject.ballsDesiredVelocityYByResolution = new float[]{0.00529412f, 0.00529412f};
                levelObject.ballsColor = new Color[] {new Color(1f, 1f, 1f, 1f),new Color(1f, 1f, 1f, 1f)};
                levelObject.ballsInvencible = new boolean[]{false, false};
                levelObject.ballsAngleToRotate = new float[]{2f, 2f};
                levelObject.ballsMaxAngle = new float[]{55f, 55f};
                levelObject.ballsMinAngle = new float[]{35f, 35f};
                levelObject.ballsVelocityVariation = new float[]{0.1f, 0.1f};
                levelObject.ballsVelocityMaxByInitialVelocity = new float[]{1.5f, 1.5f};
                levelObject.ballsVelocityMinByInitialVelocity = new float[]{0.8f, 0.8f};
                levelObject.ballsTargetsAppend = (ArrayList<Target>[]) new ArrayList[10];
                levelObject.ballsFree = new boolean[]{true, true};
                levelObject.barsQuantity = 1;
                levelObject.barsSizeXByResolution = new float[]{0.22f};//0.22f};//
                levelObject.barsSizeYByResolution = new float[]{0.0175f};//0.0125f};//
                levelObject.barsInitialXByResolution = new float[]{0.3f};//0.3f
                levelObject.barsInitialYByResolution = new float[]{0.024f};//0.014f};
                levelObject.barsDesiredVelocityXByResolution = new float[]{0.0045f};
                levelObject.barsDesiredVelocityYByResolution = new float[]{0f};

                levelObject.quantityTargetsX = 10;//10ocupa 11 espaços
                levelObject.quantityTargetsY = 2;
                levelObject.targetSizeXByResolution = 0.0895f;
                levelObject.targetSizeYByResolution = 0.04f;
                levelObject.targetsDistanceByXResolution = 0.001f;
                levelObject.targetsPaddingByXResolution = 0.00225f;

                final float quantityTargetsY = levelObject.quantityTargetsY;
                final float quantityTargetsX = levelObject.quantityTargetsX;
                final float targetsDistanceByXResolution = levelObject.targetsDistanceByXResolution;
                final float targetsPaddingByXResolution = levelObject.targetsPaddingByXResolution;
                final float targetSizeXByResolution = levelObject.targetSizeXByResolution;
                final float targetSizeYByResolution = levelObject.targetSizeYByResolution;
                final float gameAreaResolutionX = this.gameAreaResolutionX;
                final float gameAreaResolutionY = this.gameAreaResolutionY;
                final Game game = this;

                Log.e("game", "2");
                levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                    @Override
                    public void createTargets() {

                        Log.e("game", "p4");
                        for (int iY = 0; iY < quantityTargetsY;iY++){
                            for (int iX = 0; iX < quantityTargetsX; iX++) {
                                if (!(iY == 0 && iX == 0)){

                                    float xInitial = (gameAreaResolutionX * targetsPaddingByXResolution) + (iX * ((gameAreaResolutionX * targetSizeXByResolution) + (gameAreaResolutionX * targetsDistanceByXResolution)));
                                    float yInitial = (gameAreaResolutionX * targetsPaddingByXResolution) + (iY * ((gameAreaResolutionY * targetSizeYByResolution) + (gameAreaResolutionX * targetsDistanceByXResolution)));

                                    Target target = new Target("target", game, xInitial, yInitial,
                                            gameAreaResolutionX * targetSizeXByResolution,
                                            gameAreaResolutionY * targetSizeYByResolution, 9
                                            );
                                    target.isMovable = false;
                                    target.alpha = 1;
                                    target.states = new int[]{0,1};
                                    target.currentState = 1;
                                    game.addTarget(target);
                                    Log.e("game", "p5");
                                }
                            }
                        }
                    }

                    @Override
                    public void createObstacles() {

                    }

                    @Override
                    public void createWindows() {

                    }
                });

                Log.e("game", "3");
                break;
        }
    }




OBSTACLE

 sizeOfSquaresY = (getHeight()/getTransformedHeight())* (game.resolutionX/50f);

        int squaresOnX = (int)Math.floor(getWidth() / sizeOfSquaresX);
        float restX = getWidth() % sizeOfSquaresX;

        int squaresOnY = (int)Math.floor(getHeight() / sizeOfSquaresY);
        float restY = getHeight() % sizeOfSquaresY;

        //Log.e("obstacles", "sizeOfSquaresY "+sizeOfSquaresY);
        //Log.e("obstacles", "squaresOnY "+squaresOnY);
        //Log.e("obstacles", "restY "+restY);

        if (lastSquaresOnY != squaresOnY && lastSquaresOnY != 0){
            if (!midUpY) {
                midUpY = true;
            } else {
                midUpY = false;
            }
        }
        lastSquaresOnY = squaresOnY;

        if (lastSquaresOnX != squaresOnX && lastSquaresOnX != 0){
            if (!midUpX) {
                midUpX = true;
            } else {
                midUpX = false;
            }
        }
        lastSquaresOnX = squaresOnX;

        if (restX > 0){
            if (midUpX){
                squaresOnX += 1;
                restX = (getWidth() - ((squaresOnX - 2)*sizeOfSquaresX))/2f;
            } else {
                restX /= 2f;
                squaresOnX += 2;
            }
        }

        if (restY > 0){
            if (midUpY){
                squaresOnY += 1;
                restY = (getHeight() - ((squaresOnY - 2)*sizeOfSquaresY))/2f;
            } else {
                restY /= 2f;
                squaresOnY += 2;
            }
        }

        //Log.e("obstacles", "midUpY "+midUpY);
        //Log.e("obstacles", "squaresOnY "+squaresOnY);
        //Log.e("obstacles", "restY "+restY);


        int totalSquares = squaresOnY * squaresOnX;
        initializeData(12 * totalSquares, 6 * totalSquares, 8 * totalSquares, 0);
        int squareInserted = 0;
        float posY;
        float posX;
        float w;
        float h;
        boolean invertUvY;
        boolean invertUvX;
        for (int iY = 0; iY < squaresOnY; iY++) {
            invertUvY = false;
            invertUvX = false;
            if (restY != 0f){
                if (iY == 0){
                    posY = 0f;
                    h = restY;
                } else if (iY == (squaresOnY-1)) {
                    posY = restY + (sizeOfSquaresY * (iY-1));
                    h = restY;
                    invertUvY = true;
                } else {
                    posY = restY + (sizeOfSquaresY * (iY-1));
                    h = sizeOfSquaresY;
                }
            } else {
                posY = sizeOfSquaresY * iY;
                h = sizeOfSquaresY;
            }

            for (int iX = 0; iX < squaresOnX; iX++) {
                if (restX != 0f){
                    if (iX == 0){
                        posX = 0f;
                        w = restX;
                    } else if (iX == squaresOnX-1) {
                        posX = restX + (sizeOfSquaresX * (iX-1));
                        w = restX;
                        invertUvX = true;
                    } else {
                        posX = restX + (sizeOfSquaresX * (iX-1));
                        w = sizeOfSquaresX;
                    }
                } else {
                    posX = sizeOfSquaresX * iX;
                    w = sizeOfSquaresX;
                }

                //Log.e("obstacle", " pos X "+posX+" Y "+posY +" w "+w+" h "+h);


                 // cria o seletor de volume
                        selectorVolumn = new Selector("selectorVolumn",0f,0f, 40f, "", volumns, font);
                        final Selector innerSelectorVolumn = selectorVolumn;
                        selectorVolumn.setOnChange(new Selector.OnChange() {
                            @Override
                            public void onChange() {
                                Game.volume = Game.possibleVolums[innerSelectorVolumn.selectedValue];
                                Storage.setVolume(Game.volume);
                            }
                        });

                        // adiciona a opção de alterar volume
                        menuMain.addMenuOption("AlterarVolume", context.getResources().getString(R.string.menuPrincipalAlterarVolume), new MenuOption.OnChoice() {
                            @Override
                            public void onChoice() {
                                innerSelectorVolumn.fromMenu(innerMenu);
                                int volumeToSelector = volume / 10;
                                innerSelectorVolumn.setSelectedValue(volumeToSelector);
                            }
                        });

                        // ajusta a posição do seletor de nível
                        MenuOption menuOptionSelectVolumn = menuMain.getMenuOptionByName("AlterarVolume");
                        selectorVolumn.setPosition(menuOptionSelectLevel.x + (menuOptionSelectVolumn.width), menuOptionSelectVolumn.y);




                        /*

                            ballsInitialX(new float[] {
                                0.15f
                            }).ballsInitialY(new float[]{0.6f}).ballsDesiredVelocityX(new float[]{0.0036f}).ballsDesiredVelocityY(new float[]{0.00564705882352941f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{55f}).ballsMinAngle(new float[]{35f}).ballsVelocityVariation(new float[]{0.1f}).ballsVelocityMaxByInitialVelocity(new float[]{1.5f}).ballsVelocityMinByInitialVelocity(new float[]{0.8f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.18f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.005f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.075176f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();
                                game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1},
                                                    new int [][]{
                                                            {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                                            {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                                            {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0}
                                                    }
                                            );
                                        }

                                        @Override
                                        public void createObstacles() {
                                            innerGame.addObstacle(new Obstacle("obstacle", innerGame,
                                                    gX*0.4f, gY*0.4f,
                                                    gX*0.2f, gY*0.04f
                                                    ));
                                        }

                                        @Override
                                        public void createWindows() {

                                        }
                                    });
                                    break;

                                case 5:
                                    game.levelObject = new LevelBuilder().number(5).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.010f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0032f}).ballsDesiredVelocityY(new float[]{0.0056470588f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{55f}).ballsMinAngle(new float[]{35f}).ballsVelocityVariation(new float[]{0.1f}).ballsVelocityMaxByInitialVelocity(new float[]{1.5f}).ballsVelocityMinByInitialVelocity(new float[]{0.8f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.18f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.005f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {

                                            createLevelTargets(new int[]{0, 1},
                                                    new int [][]{
                                                            {0,1,1,1,0,1,0,1,1,1,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,1,1,1,0,1,0,1,1,1,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {1,1,1,1,1,1,1,1,1,1,1}
                                                    }
                                            );
                                        }

                                        @Override
                                        public void createObstacles() {
                                        }

                                        @Override
                                        public void createWindows() {

                                        }
                                    });
                                    break;

                                case 6:
                                    game.levelObject = new LevelBuilder().number(6).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.010f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0034f}).ballsDesiredVelocityY(new float[]{0.006f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{57f}).ballsMinAngle(new float[]{33f}).ballsVelocityVariation(new float[]{0.11f}).ballsVelocityMaxByInitialVelocity(new float[]{1.6f}).ballsVelocityMinByInitialVelocity(new float[]{0.75f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.17f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.005f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1},
                                                    new int [][]{
                                                            {0,0,0,0,0,0,0,0,1,1,1},
                                                            {1,0,0,0,0,0,0,0,0,1,1},
                                                            {1,0,0,0,0,0,0,0,0,0,1},
                                                            {0,0,0,0,0,0,0,0,0,1,1},
                                                            {0,1,0,0,0,0,0,0,1,1,1},
                                                            {0,1,0,0,0,0,0,1,1,1,1},
                                                            {0,0,0,0,0,0,1,0,1,0,1},
                                                            {1,0,0,0,0,0,1,1,1,1,1},
                                                            {1,0,0,0,0,0,1,1,1,1,1}
                                                    }
                                            );
                                        }
                                        @Override
                                        public void createObstacles() {
                                            innerGame.addObstacle(new Obstacle("obstacle", innerGame,
                                                    1f + innerGame.gameAreaResolutionX*0.46f,
                                                    innerGame.gameAreaResolutionY*0.2f,
                                                    innerGame.gameAreaResolutionX*0.08f,
                                                    innerGame.gameAreaResolutionY*0.05f
                                            ));
                                        }

                                        @Override
                                        public void createWindows() {

                                        }
                                    });
                                    break;

                                case 7:
                                    game.levelObject = new LevelBuilder().number(7).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.010f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0034f}).ballsDesiredVelocityY(new float[]{0.006f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{57f}).ballsMinAngle(new float[]{33f}).ballsVelocityVariation(new float[]{0.11f}).ballsVelocityMaxByInitialVelocity(new float[]{1.6f}).ballsVelocityMinByInitialVelocity(new float[]{0.75f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.17f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.005f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1},
                                                    new int [][]{
                                                            {0,3,3,3,3,3,3,3,3,3,3},
                                                            {3,3,0,0,0,0,0,0,0,3,3}
                                                    }
                                            );
                                        }
                                        @Override
                                        public void createObstacles(){}

                                        @Override
                                        public void createWindows() {}
                                    });
                                    break;

                                case 8:
                                    game.levelObject = new LevelBuilder().number(8).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.010f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0035f}).ballsDesiredVelocityY(new float[]{0.0061764706f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{58f}).ballsMinAngle(new float[]{32f}).ballsVelocityVariation(new float[]{0.1f}).ballsVelocityMaxByInitialVelocity(new float[]{1.6f}).ballsVelocityMinByInitialVelocity(new float[]{0.75f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.17f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.005f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1},
                                                    new int [][]{
                                                            {1,1,2,1,3,2,3,1,1,1,1},
                                                            {2,2,1,1,1,3,1,1,2,2,2},
                                                            {1,1,2,1,3,2,3,1,1,1,1}
                                                    }
                                            );
                                        }
                                        @Override
                                        public void createObstacles(){
                                            innerGame.addObstacle(new Obstacle("obstacle", innerGame,
                                                    1f + innerGame.gameAreaResolutionX*0.31f,
                                                    innerGame.gameAreaResolutionY*0.2f,
                                                    innerGame.gameAreaResolutionX*0.02f,
                                                    innerGame.gameAreaResolutionY*0.3f
                                            ));

                                            innerGame.addObstacle(new Obstacle("obstacle", innerGame,
                                                    1f + innerGame.gameAreaResolutionX*0.64f,
                                                    innerGame.gameAreaResolutionY*0.2f,
                                                    innerGame.gameAreaResolutionX*0.02f,
                                                    innerGame.gameAreaResolutionY*0.3f
                                            ));
                                        }

                                        @Override
                                        public void createWindows() {}
                                    });
                                    break;

                                case 9:
                                    game.levelObject = new LevelBuilder().number(9).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.010f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0035f}).ballsDesiredVelocityY(new float[]{0.0061764706f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{58f}).ballsMinAngle(new float[]{32f}).ballsVelocityVariation(new float[]{0.1f}).ballsVelocityMaxByInitialVelocity(new float[]{1.6f}).ballsVelocityMinByInitialVelocity(new float[]{0.75f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.17f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.005f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1, 2, 3},
                                                    new int [][]{
                                                            {1,1,2,4,3,0,3,1,2,1,1},
                                                            {2,2,1,1,1,0,1,4,1,2,2},
                                                            {1,1,2,1,3,0,3,1,2,1,1},
                                                            {1,1,1,1,1,4,1,1,1,1,1}
                                                    }
                                            );
                                        }
                                        @Override
                                        public void createObstacles(){
                                        }

                                        @Override
                                        public void createWindows() {}
                                    });
                                    break;

                                case 10:
                                    game.levelObject = new LevelBuilder().number(10).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.01f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0035f}).ballsDesiredVelocityY(new float[]{0.0061764706f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{58f}).ballsMinAngle(new float[]{32f}).ballsVelocityVariation(new float[]{0.1f}).ballsVelocityMaxByInitialVelocity(new float[]{1.6f}).ballsVelocityMinByInitialVelocity(new float[]{0.75f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.17f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.005f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1, 2, 3},
                                                    new int [][]{
                                                            {0,0,0,1,1,0,1,1,0,0,0},
                                                            {0,0,0,1,1,0,1,1,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {3,2,1,1,0,0,0,1,1,2,3},
                                                            {2,2,0,1,4,0,4,1,0,2,2},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {1,1,0,1,1,0,1,1,0,1,1}
                                                    }
                                            );
                                        }
                                        @Override
                                        public void createObstacles(){

                                            float posX = 0.1f;

                                            for (int i = 0; i < 5; i++) {
                                                innerGame.addObstacle(new Obstacle("obstacle", innerGame,
                                                        1f + innerGame.gameAreaResolutionX * posX + innerGame.gameAreaResolutionX*0.005f,
                                                        innerGame.gameAreaResolutionY * 0.12f,
                                                        innerGame.gameAreaResolutionX * 0.05f,
                                                        innerGame.gameAreaResolutionY * 0.2f
                                                ));
                                                innerGame.addObstacle(new Obstacle("obstacle", innerGame,
                                                        1f + innerGame.gameAreaResolutionX * posX + innerGame.gameAreaResolutionX*0.005f,
                                                        innerGame.gameAreaResolutionY * 0.29f,
                                                        innerGame.gameAreaResolutionX * 0.06f,
                                                        innerGame.gameAreaResolutionY * 0.2f
                                                ));
                                                posX += 0.185f;
                                            }
                                        }

                                        @Override
                                        public void createWindows() {}
                                    });
                                    break;

                                case 11:
                                    game.levelObject = new LevelBuilder().number(11).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.01f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0035f}).ballsDesiredVelocityY(new float[]{0.0061764706f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{58f}).ballsMinAngle(new float[]{32f}).ballsVelocityVariation(new float[]{0.1f}).ballsVelocityMaxByInitialVelocity(new float[]{1.6f}).ballsVelocityMinByInitialVelocity(new float[]{0.75f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.17f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.0051f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1, 2, 3},
                                                    new int [][]{
                                                            {0,3,0,1,0,0,0,1,0,3,0},
                                                            {1,1,0,1,0,0,0,1,0,1,1},
                                                            {1,3,0,1,0,0,0,1,0,3,1},
                                                            {1,1,0,0,0,0,0,0,0,1,1},
                                                            {1,3,2,1,0,0,0,1,2,3,1},
                                                            {3,2,2,1,0,0,0,1,2,2,3},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,4,0,4,0,0,0,4,0,4,0}
                                                    }
                                            );
                                        }
                                        @Override
                                        public void createObstacles(){
                                        }

                                        @Override
                                        public void createWindows() {}
                                    });
                                    break;

                                case 12:
                                    game.levelObject = new LevelBuilder().number(12).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.01f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0035f}).ballsDesiredVelocityY(new float[]{0.0061764706f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{58f}).ballsMinAngle(new float[]{32f}).ballsVelocityVariation(new float[]{0.1f}).ballsVelocityMaxByInitialVelocity(new float[]{1.6f}).ballsVelocityMinByInitialVelocity(new float[]{0.75f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.17f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.0051f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1, 2, 3},
                                                    new int [][]{
                                                            {0,1,0,1,0,1,0,1,0,1,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {1,0,1,0,0,0,0,0,1,0,1},
                                                            {0,1,0,1,0,0,0,1,0,1,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,4,0,0,0,0},
                                                    }
                                            );
                                        }
                                        @Override
                                        public void createObstacles(){
                                        }

                                        @Override
                                        public void createWindows() {}
                                    });
                                    break;

                                case 13:
                                    game.levelObject = new LevelBuilder().number(12).game(game).ballsQuantity(1).minBallsNotInvencibleAlive(1).ballsRadius(new float[]{0.01f}).ballsInitialX(new float[]{0.2f}).ballsInitialY(new float[]{0.4f}).ballsDesiredVelocityX(new float[]{0.0035f}).ballsDesiredVelocityY(new float[]{0.0061764706f}).ballsTextureMap(new int[]{Ball.COLOR_BALL_BLACK}).ballsIsInvencible(new boolean[]{false}).ballsAngleToRotate(new float[]{2.2f}).ballsMaxAngle(new float[]{58f}).ballsMinAngle(new float[]{32f}).ballsVelocityVariation(new float[]{0.1f}).ballsVelocityMaxByInitialVelocity(new float[]{1.6f}).ballsVelocityMinByInitialVelocity(new float[]{0.75f}).ballsTargetsAppend(new ArrayList<ArrayList<Target>>()).ballsFree(new boolean[]{true}).barsQuantity(1).barsSizeX(new float[]{0.17f}).barsSizeY(new float[]{0.0175f}).barsInitialX(new float[]{0.3f}).barsInitialY(new float[]{0.024f}).barsDesiredVelocityX(new float[]{0.0052f}).barsDesiredVelocityY(new float[]{0f}).targetWidth(0.0891f).targetHeight(0.04f).setTargetsDistanceByXResolution(0.0014f).setTargetsPaddingByXResolution(0.00225f).createLevel();

                                    game.levelObject.setEntitiesCreator(new Level.EntitiesCreator() {
                                        @Override
                                        public void createTargets() {
                                            createLevelTargets(new int[]{0, 1, 2, 3},
                                                    new int [][]{
                                                            {1,1,1,1,1,1,1,1,1,1,1},
                                                            {2,0,2,0,2,0,2,0,2,0,2},
                                                            {1,0,1,0,1,0,1,0,1,0,1},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,7,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,7,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {0,0,0,0,0,0,0,0,0,0,0},
                                                            {7,0,0,0,0,0,0,0,0,0,7},
                                                            {0,7,0,0,0,7,0,0,0,7,0},
                                                    }
                                            );
                                        }
                                        @Override
                                        public void createObstacles(){}

                                        @Override
                                        public void createWindows() {}
                                    });
                                    break;
                                }
                            }


                            public static void  createTarget(int iX, int iY, int type, int[] states){
                                if (type == 0){
                                    return;
                                }

                            }

                            public static void createLevelTargets(int [] states, int [][] map){


                            }

                            */

